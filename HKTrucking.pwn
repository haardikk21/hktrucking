/*
=================================================================
                                                Credits:
        SA:MP Team - Without whom, nothing would have been possible
                Y_Less - y_commands, Whirlpool, sscanf
                                        Spookie - Pawno
                        [HK]Ryder[AN] - This Script
=================================================================
*/
//====================[Do Not Remove This]==================
native WP_Hash(buffer[], len, const str[]);
//=====================[Includes]===========================
#include <a_samp>
#include <YSI\y_ini>
#include <zcmd>
#include <sscanf2>
//==================[Dialogs]======================
#define DIALOG_REGISTER 1
#define DIALOG_LOGIN 2
#define DIALOG_RULES 3
#define DIALOG_QUESTION1 4
#define DIALOG_QUESTION2 5
#define DIALOG_QUESTION3 6
#define DIALOG_QUESTION4 7
#define DIALOG_QUESTION5 8
//===============================[Teams]===========================
#define TEAM_TRUCKER 1
#define TEAM_BUSDRIVER 2
#define TEAM_TAXIDRIVER 3
#define TEAM_PILOT 4
#define TEAM_BOATDRIVER 5
//============================[Team Colors]==========================
#define TEAM_TRUCKER_COLOR 0xFF8300FF
#define TEAM_BUSDRIVER_COLOR 0xA97AC6FF
#define TEAM_TAXIDRIVER_COLOR 0xFFD500FF
#define TEAM_PILOT_COLOR 0x5353A4FF
#define TEAM_BOATDRIVER_COLOR 0x53E4FFFF
///===========================[Enums]=========================

#define Userpath "Transport/Users/%s.ini"
enum PlayerInfo
{
        pPass[129],
        pAdmin,
        pVIP,
        pMoney,
        pScore,
        pMute,
        pFrozen,
        pWarns,
        pSpam,
        pDuty,
        pNoPM,
        pAnswers,
}
new pInfo[MAX_PLAYERS][PlayerInfo];

enum MisLocationsEnum
{
        ID,
        LoadName[128],
        Float:LoadX,
        Float:LoadY,
        Float:LoadZ,
        Float:UnloadX,
        Float:UnloadY,
        Float:UnloadZ,
        Pay
}

enum BusLocationsEnum
{
        ID,
        LoadName[128],
        Float:LoadX,
        Float:LoadY,
        Float:LoadZ,
        Float:UnloadX,
        Float:UnloadY,
        Float:UnloadZ,
        Pay
}

enum BoatLocationsEnum
{
        ID,
        LoadName[128],
        Float:LoadX,
        Float:LoadY,
        Float:LoadZ,
        Float:UnloadX,
        Float:UnloadY,
        Float:UnloadZ,
        Pay
}

enum TaxiLocationsEnum
{
        ID,
        LoadName[128],
        Float:LoadX,
        Float:LoadY,
        Float:LoadZ,
        Float:UnloadX,
        Float:UnloadY,
        Float:UnloadZ,
        Pay
}

enum PilotLocationsEnum
{
        ID,
        LoadName[128],
        Float:LoadX,
        Float:LoadY,
        Float:LoadZ,
        Float:UnloadX,
        Float:UnloadY,
        Float:UnloadZ,
        Pay
}
//======================[Textdraw - Ban System]=======================
new PlayerText:BanBox[MAX_PLAYERS];
new PlayerText:BanInfo[MAX_PLAYERS];
new PlayerText:BanReason[MAX_PLAYERS];
new PlayerText:BanBy[MAX_PLAYERS];
new PlayerText:Msg1[MAX_PLAYERS];
new PlayerText:Msg2[MAX_PLAYERS];
//======================[Textdraw - PlayerInfo]=====================
new PlayerText:InfoBox[MAX_PLAYERS];
new PlayerText:InfoName[MAX_PLAYERS];
//======================[Textdraw - Spectating]===================
new PlayerText:SpecBox[MAX_PLAYERS];
new PlayerText:SpecON[MAX_PLAYERS];
new PlayerText:SpecName[MAX_PLAYERS];
new PlayerText:SpecVeh[MAX_PLAYERS];
//=======================[Textdraw - Work]======================
new Text:WorkText;
//===========================[Vehicles Stuff]=============================
enum
{
        // Data from vehicles.ide

        VEHICLE_LANDSTAL = 400, VEHICLE_BRAVURA, VEHICLE_BUFFALO, VEHICLE_LINERUN,
        VEHICLE_PEREN, VEHICLE_SENTINEL, VEHICLE_DUMPER, VEHICLE_FIRETRUK,
        VEHICLE_TRASH, VEHICLE_STRETCH, VEHICLE_MANANA, VEHICLE_INFERNUS,
        VEHICLE_VOODOO, VEHICLE_PONY, VEHICLE_MULE, VEHICLE_CHEETAH,
        VEHICLE_AMBULAN, VEHICLE_LEVIATHN, VEHICLE_MOONBEAM, VEHICLE_ESPERANT,
        VEHICLE_TAXI, VEHICLE_WASHING, VEHICLE_BOBCAT, VEHICLE_MRWHOOP,
        VEHICLE_BFINJECT, VEHICLE_HUNTER, VEHICLE_PREMIER, VEHICLE_ENFORCER,
        VEHICLE_SECURICA, VEHICLE_BANSHEE, VEHICLE_PREDATOR, VEHICLE_BUS,
        VEHICLE_RHINO, VEHICLE_BARRACKS, VEHICLE_HOTKNIFE, VEHICLE_ARTICT1,
        VEHICLE_PREVION, VEHICLE_COACH, VEHICLE_CABBIE, VEHICLE_STALLION,
        VEHICLE_RUMPO, VEHICLE_RCBANDIT, VEHICLE_ROMERO, VEHICLE_PACKER,
        VEHICLE_MONSTER, VEHICLE_ADMIRAL, VEHICLE_SQUALO, VEHICLE_SEASPAR,
        VEHICLE_PIZZABOY, VEHICLE_TRAM, VEHICLE_ARTICT2, VEHICLE_TURISMO,
        VEHICLE_SPEEDER, VEHICLE_REEFER, VEHICLE_TROPIC, VEHICLE_FLATBED,
        VEHICLE_YANKEE, VEHICLE_CADDY, VEHICLE_SOLAIR, VEHICLE_TOPFUN,
        VEHICLE_SKIMMER, VEHICLE_PCJ600, VEHICLE_FAGGIO, VEHICLE_FREEWAY,
        VEHICLE_RCBARON, VEHICLE_RCRAIDER, VEHICLE_GLENDALE, VEHICLE_OCEANIC,
        VEHICLE_SANCHEZ, VEHICLE_SPARROW, VEHICLE_PATRIOT, VEHICLE_QUAD,
        VEHICLE_COASTG, VEHICLE_DINGHY, VEHICLE_HERMES, VEHICLE_SABRE,
        VEHICLE_RUSTLER, VEHICLE_ZR350, VEHICLE_WALTON, VEHICLE_REGINA,
        VEHICLE_COMET, VEHICLE_BMX, VEHICLE_BURRITO, VEHICLE_CAMPER,
        VEHICLE_MARQUIS, VEHICLE_BAGGAGE, VEHICLE_DOZER, VEHICLE_MAVERICK,
        VEHICLE_VCNMAV, VEHICLE_RANCHER, VEHICLE_FBIRANCH, VEHICLE_VIRGO,
        VEHICLE_GREENWOO, VEHICLE_JETMAX, VEHICLE_HOTRING, VEHICLE_SANDKING,
        VEHICLE_BLISTAC, VEHICLE_POLMAV, VEHICLE_BOXVILLE, VEHICLE_BENSON,
        VEHICLE_MESA, VEHICLE_RCGOBLIN, VEHICLE_HOTRINA, VEHICLE_HOTRINB,
        VEHICLE_BLOODRA, VEHICLE_RNCHLURE, VEHICLE_SUPERGT, VEHICLE_ELEGANT,
        VEHICLE_JOURNEY, VEHICLE_BIKE, VEHICLE_MTBIKE, VEHICLE_BEAGLE,
        VEHICLE_CROPDUST, VEHICLE_STUNT, VEHICLE_PETRO, VEHICLE_RDTRAIN,
        VEHICLE_NEBULA, VEHICLE_MAJESTIC, VEHICLE_BUCCANEE, VEHICLE_SHAMAL,
        VEHICLE_HYDRA, VEHICLE_FCR900, VEHICLE_NRG500, VEHICLE_COPBIKE,
        VEHICLE_CEMENT, VEHICLE_TOWTRUCK, VEHICLE_FORTUNE, VEHICLE_CADRONA,
        VEHICLE_FBITRUCK, VEHICLE_WILLARD, VEHICLE_FORKLIFT, VEHICLE_TRACTOR,
        VEHICLE_COMBINE, VEHICLE_FELTZER, VEHICLE_REMINGTN, VEHICLE_SLAMVAN,
        VEHICLE_BLADE, VEHICLE_FREIGHT, VEHICLE_STREAK, VEHICLE_VORTEX,
        VEHICLE_VINCENT, VEHICLE_BULLET, VEHICLE_CLOVER, VEHICLE_SADLER,
        VEHICLE_FIRELA, VEHICLE_HUSTLER, VEHICLE_INTRUDER, VEHICLE_PRIMO,
        VEHICLE_CARGOBOB, VEHICLE_TAMPA, VEHICLE_SUNRISE, VEHICLE_MERIT,
        VEHICLE_UTILITY, VEHICLE_NEVADA, VEHICLE_YOSEMITE, VEHICLE_WINDSOR,
        VEHICLE_MONSTERA, VEHICLE_MONSTERB, VEHICLE_URANUS, VEHICLE_JESTER,
        VEHICLE_SULTAN, VEHICLE_STRATUM, VEHICLE_ELEGY, VEHICLE_RAINDANC,
        VEHICLE_RCTIGER, VEHICLE_FLASH, VEHICLE_TAHOMA, VEHICLE_SAVANNA,
        VEHICLE_BANDITO, VEHICLE_FREIFLAT, VEHICLE_STREAKC, VEHICLE_KART,
        VEHICLE_MOWER, VEHICLE_DUNERIDE, VEHICLE_SWEEPER, VEHICLE_BROADWAY,
        VEHICLE_TORNADO, VEHICLE_AT400, VEHICLE_DFT30, VEHICLE_HUNTLEY,
        VEHICLE_STAFFORD, VEHICLE_BF400, VEHICLE_NEWSVAN, VEHICLE_TUG,
        VEHICLE_PETROTR, VEHICLE_EMPEROR, VEHICLE_WAYFARER, VEHICLE_EUROS,
        VEHICLE_HOTDOG, VEHICLE_CLUB, VEHICLE_FREIBOX, VEHICLE_ARTICT3,
        VEHICLE_ANDROM, VEHICLE_DODO, VEHICLE_RCCAM, VEHICLE_LAUNCH,
        VEHICLE_COPCARLA, VEHICLE_COPCARSF, VEHICLE_COPCARVG, VEHICLE_COPCARRU,
        VEHICLE_PICADOR, VEHICLE_SWATVAN, VEHICLE_ALPHA, VEHICLE_PHOENIX,
        VEHICLE_GLENSHIT, VEHICLE_SADLSHIT, VEHICLE_BAGBOXA, VEHICLE_BAGBOXB,
        VEHICLE_TUGSTAIR, VEHICLE_BOXBURG, VEHICLE_FARMTR1, VEHICLE_UTILTR1
};

enum
{
        // Data from popcycle.dat

        ZONE_TYPE_BUSINESS,
        ZONE_TYPE_DESERT,
        ZONE_TYPE_ENTERTAINMENT,
        ZONE_TYPE_COUNTRYSIDE,
        ZONE_TYPE_RESIDENTIAL_RICH,
        ZONE_TYPE_RESIDENTIAL_AVERAGE,
        ZONE_TYPE_RESIDENTIAL_POOR,
        ZONE_TYPE_GANGLAND,
        ZONE_TYPE_BEACH,
        ZONE_TYPE_SHOPPING,
        ZONE_TYPE_PARK,
        ZONE_TYPE_INDUSTRY,
        ZONE_TYPE_ENTERTAINMENT_BUSY,
        ZONE_TYPE_SHOPPING_BUSY,
        ZONE_TYPE_SHOPPING_POSH,
        ZONE_TYPE_RESI_RICH_SECLUDED,
        ZONE_TYPE_AIRPORT,
        ZONE_TYPE_GOLF_CLUB,
        ZONE_TYPE_OUT_OF_TOWN_FACTORY,
        ZONE_TYPE_AIRPORT_RUNWAY
};

enum e_VEHICLE
{
              e_iModel,
        Float:e_fX,
        Float:e_fY,
        Float:e_fZ,
        Float:e_fRot
};

new const
        g_Vehicles[ ][ e_VEHICLE ] =
        {
                // Data from the binary ipl files located in gta3.img and gta_int.img (the latter probably didn't contain any vehicles)
                // Generated by cars.php

                {   1, -1926.9300,  2360.8900,    48.2519,   0.00 },
                {   1, -1925.9700,  2375.4000,    48.7066, 112.50 },
                { 510, -1665.5500,  2557.8700,    84.3825, 281.00 },
                { 460, -2044.8700,  2348.2300,     1.0000,  85.00 },
                { 421,  -680.5810,   948.1980,    11.2926,  37.00 },
                { 473,  -795.1580,  1825.8500,     1.0000, 187.50 },
                {   1, -1493.0600,  1879.0200,    32.1078, 180.00 },
                {   1, -1489.2400,  1879.0200,    32.1078, 180.00 },
                {   1, -1192.7200,  1822.3500,    41.3174,  50.00 },
                {   1, -1196.2800,  1818.4300,    41.3174,  30.00 },
                {   1, -1200.7600,  1814.3900,    41.3174, 220.00 },
                { 471,  -938.2540,  1432.0400,    29.0642, 322.00 },
                { 468, -1055.0700,  1543.5100,    32.8790,   0.00 },
                {   1,   653.0240,  1714.9700,     6.0463, 222.50 },
                {   1,   725.0390,  1946.6900,     4.6746,   0.00 },
                { 588,   680.8410,  1831.3200,     4.6746,   9.50 },
                {   1,   781.7310,  1886.9000,     4.0516,  90.00 },
                {   1,   778.0200,  1943.0700,     4.7868,  90.00 },
                { 435,   588.3800,  1647.3100,     6.0463, 242.50 },
                { 443,   597.8330,  1653.4300,     6.0463, 242.50 },
                { 591,   613.3340,  1662.2400,     6.0463, 242.50 },
                { 403,   581.0340,  1641.4200,     6.0463, 242.50 },
                { 548,   296.1270,  1925.9500,    17.2462, 235.00 },
                { 433,   301.8080,  1863.8800,    17.2462,   0.00 },
                { 470,   304.8060,  1839.4600,    19.6163, 335.00 },
                {   1,  -865.4820,  2758.5700,    45.0637,  95.00 },
                {   1,  -786.6870,  2761.5700,    44.7546,  91.00 },
                {   1,  -786.6810,  2756.0100,    44.7546,  91.00 },
                {   1,  -766.3660,  2761.0100,    44.7546,   1.50 },
                { 588,  -201.5940,  2595.9700,    62.3132,  51.00 },
                {   1,  -821.0830,  2756.8400,    44.7546,  91.00 },
                {   1,  -875.8430,  2756.4600,    44.7546, 273.50 },
                {   1,  -616.6550,  2709.3600,    72.2364, 180.50 },
                { 471,  -595.7800,  2709.1300,    71.5507, 180.50 },
                { 423,  -231.6360,  2595.6000,    62.3132, 359.00 },
                { 471,  -158.2160,  2701.6000,    61.5000, 340.00 },
                {   1,  -303.9240,  2686.3000,    61.8392, 270.00 },
                { 584,  -337.4110,  2679.9300,    62.3793, 185.00 },
                {   1,  -290.5010,  2721.3200,    61.5112, 180.00 },
                {   1,  -255.2050,  2767.4200,    61.5112, 180.00 },
                {   1,  -214.7760,  2781.9800,    61.7830,  80.00 },
                {   1,  -236.3430,  2815.7200,    61.0937, 340.00 },
                { 604,  -171.8640,  2759.4300,    62.0178,  25.00 },
                { 422,  -226.8440,  2595.5900,    62.3132, 359.00 },
                { 604,  -740.1830,  2757.9800,    46.2423, 306.50 },
                { 473,   -91.5907,  3001.3200,     1.0000,  60.00 },
                { 473,  -615.6740,  3016.6200,     1.0000, 320.00 },
                { 473, -1037.6800,  2994.0000,     1.0000,  75.00 },
                { 453,  -832.8990,  3020.4700,     1.0000, 320.00 },
                { 453,  -300.9780,  3054.4000,     1.0000, 320.00 },
                {   1,  -291.4290,  1756.9700,    41.8357, 267.50 },
                {   1,  -301.0640,  1762.9800,    41.8357,  89.50 },
                { 588,  -291.3030,  1731.6200,    41.8357,  47.00 },
                {   1,  -301.0640,  1750.8000,    41.8357,  89.50 },
                { 424,   -17.4257,  2355.7400,    23.5071, 144.00 },
                { 473,  -483.5200,  2182.4700,    42.6707, 179.50 },
                { 460,  -806.5790,  2229.2000,    40.9529, 269.50 },
                { 495,  -346.6070,  1609.0600,    75.0474,  93.00 },
                { 422,  -127.7880,  2244.3100,    31.1122, 169.96 },
                { 473,  -527.6700,  1634.5500,     0.0687, 232.00 },
//              { 447,  -622.8630,  1804.1400,     0.0687,  89.00 }, // Seasparrow
                {   1,   586.0220,  1222.5300,    11.0922,  30.00 },
                {   1,   593.7720,  1226.6100,    11.0922,  30.00 },
                {  18,   639.6370,  1246.8900,    10.8406, 120.00 },
                {   1,   708.8050,  1202.6300,    12.4502,  85.00 },
                {  18,   279.8440,  1346.7200,     9.7165,  90.00 },
                {  18,   279.8440,  1363.5600,     9.7165,  90.00 },
                { 512,   723.3640,  1217.3900,    13.0266, 345.00 },
                {   1,   321.7450,  1137.9000,     7.9396, 115.00 },
                {   1,   405.7280,  1152.5600,     7.2815,  75.00 },
                {   1,   509.4260,  1122.6600,    14.0896, 220.00 },
                {  18,   840.1840,   831.9430,    12.5358,  20.00 },
                {  18,   852.0800,   835.7360,    12.6584, 205.00 },
                {  18,   859.9190,   838.6670,    12.4138, 205.00 },
                {   1,   500.8770,  2384.2500,    29.1301, 144.00 },
                {   1,   507.2170,  2380.7600,    29.3482, 144.00 },
                {   1,   515.0540,  2373.1700,    29.3716, 144.00 },
                {   1,   521.2230,  2372.1500,    29.6648, 144.00 },
                {   1,   529.8380,  2365.1200,    29.7639, 144.00 },
                { 605,   258.4360,  2890.0400,    10.3709,  90.00 },
//              { 447,   266.7030,  2951.8700,     1.0000, 360.00 }, // Seasparrow
                { 454,   422.1840,  2976.4500,     1.0000, 320.00 },
                { 453,   805.1640,  3002.4600,     1.0000, 320.00 },
                {   1,   -85.1397,  1339.5500,    10.2088, 188.50 },
                {   1,   -90.9491,  1338.7100,    10.2088, 188.50 },
                {   1,  -292.5860,  1569.3700,    75.0474, 314.00 },
                {   1,  -299.9300,  1576.9300,    75.0474, 314.00 },
                {   1,  -287.4290,  1564.5100,    75.0474, 314.00 },
                {   1,  -336.3270,  1515.6600,    75.0474, 179.50 },
                {   1,  -326.8640,  1515.4800,    75.0474, 179.50 },
                {   1,  -290.3690,  1322.0600,    53.6922, 262.00 },
                {   1,     9.2385,  1165.7300,    18.7745, 180.00 },
                {   1,  -138.2990,  1083.3500,    18.7988, 180.00 },
                {   1,   -85.5733,  1120.2800,    18.7988, 349.50 },
                {   1,  -138.2910,  1124.6500,    18.7988, 272.00 },
                {   1,  -135.8440,  1177.8200,    18.7988, 180.00 },
                {   1,  -139.8730,  1177.8800,    18.7988, 180.00 },
                {   1,   -96.6166,  1222.9700,    18.7988,   2.00 },
                {   1,   -86.9726,  1222.9700,    18.7988,   2.00 },
                {   1,   -82.0213,  1222.9700,    18.7988,   2.00 },
                {   1,   -12.9274,  1224.9400,    18.7988,  92.00 },
                {   1,    63.0077,  1221.8400,    18.7988, 349.00 },
                {   1,   -30.6974,  1165.9900,    18.7988, 179.00 },
                {   1,  -176.8580,  1224.8900,    18.7988,  90.00 },
                {   1,  -201.3750,  1218.7200,    18.7988,  15.00 },
                {   1,  -160.1160,  1230.6700,    18.7988,  15.00 },
                { 509,  -325.1410,  1117.2300,    19.3511, 270.00 },
                { 510,  -263.3210,  1170.7900,    19.3511,   5.00 },
                { 511,   -38.7069,  1083.2000,    19.1872,   5.00 },
                {   1,    46.3781,  1122.8100,    18.9469, 270.00 },
                {   1,    58.0022,  1158.2900,    17.8983, 180.00 },
                {   1,    51.1242,  1157.8500,    17.8983, 180.00 },
                {   1,    53.2298,  1177.5300,    17.8983,   0.00 },
                { 604,   -13.3806,  1389.4800,     8.6538, 185.00 },
                { 604,   -20.7622,  1341.1400,     8.6538, 300.00 },
                { 452,  -421.5600,  1158.5800,     0.0687,  89.00 },
                {   1,  -166.0040,  1013.3000,    18.7920, 180.00 },
                { 478,   -31.9395,   962.5610,    18.7813, 180.00 },
                { 543,    70.7797,  1000.1900,    13.5232, 180.00 },
                {   1,  -101.3990,   887.7490,    19.5274, 180.00 },
                {   1,  -154.6920,   871.5520,    17.5154,  90.00 },
                {   1,    -4.1932,   957.3900,    18.8149, 100.00 },
                {   1,  -172.6720,  1013.3200,    18.7920, 180.00 },
                {   1,   -80.6343,  1076.5700,    18.7988, 180.00 },
                {   1,  -210.5990,   998.4910,    18.7920, 270.00 },
                { 442,  -304.2210,  1023.7800,    18.7920, 270.00 },
                {   1,  -303.9900,  1011.9600,    18.7920,  90.00 },
                { 473,  -492.9110,   615.9930,     0.0687, 179.50 },
                { 572, -1076.6000, -1207.1800,   128.2200, 177.49 },
                { 531, -1068.9000, -1222.3400,   128.2200, 269.02 },
                {  -1, -1729.1800,  -986.1800,    74.5090,   0.00 },
                {   3,   -21.9619, -2494.9900,    35.8080, 122.32 },
                {   3,   -22.9310, -2523.6600,    35.8080, 211.43 },
                {   3,   -31.2765, -2492.8100,    35.8080,  34.05 },
                {   3,   -36.6128, -2496.9900,    35.8080, 214.88 },
                { 531,  -268.8050, -2186.1900,    27.8517,  20.50 },
                { 531,  -287.4430, -2171.6800,    27.8517, 111.96 },
                { 422,   -73.2554, -1587.4800,     1.6206, 145.00 },
                { 444,   -67.4378, -1555.4800,     1.6206, 250.00 },
                {   3,   -13.6696, -2519.6600,    35.8080,  30.90 },
                {   3,   -17.8053, -2500.5000,    35.8080, 120.38 },
                {   3,   -12.9354, -2509.0800,    35.8080, 120.38 },
                {   3,    29.6094, -2637.4900,    39.4655, 120.38 },
                { 604,  -141.1320, -2516.5700,    30.5894, 120.38 },
                { 453,  -170.3460, -2119.8300,     0.0000,  35.00 },
                { 453,   -35.4558, -2286.0500,     0.0000, 315.00 },
                { 453,   126.4340, -2713.6100,     0.0000,  30.00 },
                { 453,   138.8640, -2487.8100,     0.0000, 310.00 },
                { 453,  -193.6600, -3014.5600,     0.0000, 310.00 },
                { 588,    19.6988, -2634.6000,    39.4655, 181.24 },
                {   1,   -61.6564, -1581.9000,     1.7107, 145.00 },
                { 478,  -623.4540, -2409.9300,    29.3886,   0.00 },
                {  18,  -495.0400,  -487.6350,    24.5267,   0.00 },
                {  18,  -544.9850,  -486.9760,    24.5267,   0.00 },
                {  18,  -504.8450,  -487.3940,    24.5267, 180.54 },
                {  18,  -519.4780,  -472.1770,    24.5267, 180.54 },
                {  18,  -504.5110,  -472.8230,    24.5267, 180.54 },
                {  18,  -589.6090,  -472.9520,    24.5267,   0.00 },
                { 514,  -605.4790,  -492.1890,    24.5267,   0.00 },
                { 584,  -572.5030,  -500.6890,    24.5267,   0.00 },
                {  18,  -485.2610,  -488.1870,    24.5267,   0.00 },
                {  18,  -540.3030,  -488.2710,    24.5267,   0.00 },
                {  18,  -560.0550,  -473.0050,    24.5267,   0.00 },
                {  18,  -570.2220,  -487.8850,    24.5267,   0.00 },
                {  18,  -579.9030,  -472.2800,    24.5267,   0.00 },
                {  18,  -560.1540,  -488.4590,    24.5267, 180.82 },
                {  18,  -525.1680,  -487.8370,    24.5267, 180.82 },
                {  18,  -495.2210,  -472.7610,    24.5267, 180.82 },
                { 468,  -430.8710,  -391.2440,    15.1802, 148.48 },
                { 543,  -414.3970,  -443.0050,    17.4034, 206.48 },
                { 543,  -371.9530, -1436.9100,    24.7245,  83.36 },
                { 543,  -360.2960, -1043.7500,    58.2125,   0.00 },
                {   3,  -567.5980, -1045.0300,    23.2099, 237.56 },
                {   3,  -563.1740, -1039.4900,    23.2099, 237.56 },
                {   3,  -575.4600, -1057.1500,    23.2099, 237.56 },
                {   3,  -587.1610, -1074.9200,    23.2099, 237.56 },
                {   3,  -583.3570, -1069.0500,    23.2099,  56.96 },
                {   3,  -593.1000, -1084.9900,    23.2099,  56.96 },
                {   3,  -569.6460, -1048.1300,    23.2099,  56.96 },
                {   3,  -563.8580, -1059.7300,    22.8433, 145.32 },
                {   3,  -576.3760, -1078.9200,    22.6438, 145.32 },
                {   3,  -586.5660, -1071.3500,    22.3951,  55.33 },
                {   3,  -580.3670, -1063.0400,    22.7374,  55.33 },
                {   3,  -572.3670, -1050.6300,    22.8064,  55.33 },
                {   3,  -564.8070, -1038.5000,    23.2783, 236.66 },
                { 605,  -360.9830, -1046.1500,    58.6527,   0.00 },
                {   3,   -93.1565, -1195.6300,     1.4816, 345.60 },
                {   3,   -84.4512, -1198.1300,     1.4816, 345.60 },
                {   3,   -91.4524, -1213.0300,     1.7260, 345.60 },
                { 478, -1121.5600, -1658.8100,    75.3668,   0.00 },
                { 531, -1436.5900, -1482.9500,   100.7610,   0.00 },
                { 531, -1144.3200, -1466.3300,   124.3590, 100.00 },
                { 453,  -647.4330, -2909.5500,     0.0000,  85.00 },
                { 510,  -878.4980, -2638.5200,    97.6309,   0.00 },
                { 510,  -891.0140, -2634.8200,    97.6309, 308.95 },
                { 604,  -871.2920, -2280.6700,    28.4082,   0.00 },
                { 604,  -784.4020, -2363.2000,    50.2165,   0.00 },
                { 604, -1013.1900, -2460.7700,    73.5105,   0.00 },
                { 471, -1002.0400, -2395.9700,    68.7133,   0.00 },
                { 471, -1165.5600, -2335.4000,    23.7966,   0.00 },
                { 473, -1245.5500, -2439.3900,     0.0000,   0.00 },
                { 471,  -729.2680, -2086.9600,    12.5591,   0.00 },
                { 510,  -789.8200, -2699.6800,    84.4095,   0.00 },
                {  18, -1030.1800,  -653.5860,    31.1719, 269.30 },
                {  18, -1030.1500,  -643.4020,    31.1719,  89.71 },
                {  18, -1006.0700,  -658.6090,    31.1719,  89.71 },
                {  18,  -982.9360,  -630.6360,    31.1719,  89.71 },
                {  18,  -982.7960,  -663.7680,    31.1719, 270.49 },
                {   3,  -933.1820,  -497.7290,    25.0924, 183.92 },
                {   3,  -960.6790,  -520.4480,    25.0924, 273.81 },
                { 468,  -923.7040,  -532.6830,    25.0924, 273.81 },
                { 530, -1055.0800,  -658.3540,    31.1719, 268.68 },
                { 530,  -981.3070,  -709.4140,    31.1719, 268.68 },
                { 531, -1429.8700,  -964.1870,   200.0830, 267.96 },
                { 468, -1419.4500,  -961.1660,   200.0150, 184.33 },
                { 512, -1427.8100,  -950.0470,   200.1340, 271.89 },
                {  18, -1003.9000,  -641.6150,    31.1719,  89.71 },
                {  18, -1003.8200,  -631.5340,    31.1719,  89.71 },
                {  18, -1004.3200,  -649.2380,    31.1719,  89.71 },
                {  16, -1189.3400,  -676.4470,    48.8423,   0.00 },
                {  -1, -1218.2700,  -739.2530,    59.4097, 323.24 },
                {   3, -2099.0200, -2241.9500,    29.6221, 140.00 },
                {   3, -2211.9700, -2152.1400,    44.0107,  40.00 },
                {   3, -2232.4600, -2168.4500,    44.0107, 270.00 },
                { 481, -1862.4000, -1561.8400,    21.4371,  87.00 },
                { 471, -1645.4000, -2251.6100,    30.9744,  67.50 },
                { 604, -1826.4400, -1638.6300,    21.2376,  59.50 },
                { 471, -2163.7000, -1935.1500,   235.8740,  42.00 },
                { 486, -1898.0300, -1707.5500,    21.7439, 118.50 },
                { 525, -1915.4900, -1638.5900,    21.2376, 250.00 },
                { 424, -1694.2400, -1910.8800,    98.4082, 267.50 },
                { 524, -1819.5600, -1612.3900,    22.3219, 181.00 },
                { 524, -1851.7500, -1618.0700,    22.3219, 152.00 },
                { 468, -2822.8200, -1528.1800,   138.5300,   0.00 },
                { 473, -2678.6500, -2172.5800,     0.8243,  76.50 },
                { 473, -2978.0400, -1536.8700,    -0.1380,  47.50 },
                {   3, -2226.7600, -2328.3000,    29.6221, 320.00 },
                {   3, -2237.1900, -2319.6100,    29.6221, 320.00 },
                {   3, -2222.3500, -2313.6800,    29.6221, 140.00 },
                {   3, -2191.7300, -2267.6300,    29.6221, 140.00 },
                {   3, -2196.8800, -2263.5200,    29.6221, 140.00 },
                {   3, -2217.2500, -2405.1200,    30.7716, 230.00 },
                { 442, -2205.7700, -2297.3000,    29.9093, 323.50 },
                { 478, -1994.6200, -2382.6600,    29.9173, 341.00 },
                {   3, -2118.6800, -2471.1100,    29.6221, 230.00 },
                {   3, -2098.1600, -2541.5700,    29.6221, 230.00 },
                {   3, -2124.8000, -2503.9400,    29.6221, 230.00 },
                {   3, -2168.9200, -2528.5600,    29.6221, 320.00 },
                {   3, -2200.8600, -2502.9600,    29.6221, 320.00 },
                {   3, -2237.0000, -2476.7400,    30.2925, 320.00 },
                { 509, -2151.7900, -2550.0900,    29.6401, 319.50 },
                { 584, -2236.5300, -2571.5200,    31.1133,  58.00 },
                { 424, -2243.1100, -2821.8700,     2.7471,  95.50 },
                { 473, -2251.4200, -2848.0300,     0.8243, 165.50 },
                {   3, -1539.9300, -2747.5400,    47.7061, 354.07 },
                {   3, -1530.7600, -2751.4400,    47.7061, 354.07 },
                {   3, -1558.0800, -2741.7400,    47.7061, 325.39 },
                {   3, -1571.7100, -2732.2600,    47.7061, 325.39 },
                {   3, -1562.7500, -2738.5500,    47.7061, 144.27 },
                { 605, -1305.1700, -2394.7400,    24.1590,   0.00 },
                { 450, -1941.8500, -2430.0500,    30.0538, 211.50 },
                { 473, -1851.1500, -2779.9700,     0.8243, 139.00 },
                { 478, -1220.2100, -2632.0500,    10.6320,  85.50 },
                { 471, -1347.8500, -2268.3200,    37.0572, 327.00 },
                {   1, -1307.7400,  2707.1100,    49.5722, 180.00 },
                {   1, -1287.4000,  2709.0600,    49.5722, 180.00 },
                {   1, -1400.9800,  2653.0900,    55.2256,  90.00 },
                {   1, -1400.9800,  2659.6400,    55.2256,  90.00 },
                {   1, -1367.7300,  2046.6100,    51.7887, 235.00 },
                {  18,  -910.2050,  2016.6700,    60.3451, 125.00 },
                {  18,  -918.1410,  2026.5000,    60.3451, 135.00 },
                {  18,  -929.3900,  2019.9600,    60.3451, 315.00 },
                { 588,  -907.4870,  1991.8700,    60.0915, 334.00 },
                { 452, -1182.9100,  2800.9500,    42.6090, 275.00 },
                { 610, -1500.0700,  1974.2700,    47.7622, 225.00 },
                { 584, -1335.2200,  2696.7700,    49.4931, 305.00 },
                { 605, -1432.0200,  2182.4900,    50.4391,   0.00 },
                {   0,  1279.7800, -1800.9500,    12.6357,  90.00 },
                {   0,  1239.3100, -1817.8000,    12.6357,  90.00 },
                {   0,  1062.0700, -1760.9200,    12.6357,  90.00 },
                {   0,  1062.0700, -1746.1800,    12.6357, 270.00 },
                {   0,  1099.0000, -1766.6600,    12.6357, 270.00 },
                { 572,   298.5010, -1196.3600,    80.5310,  84.50 },
                {  15,  1248.7400,  -803.8380,    83.9211, 180.00 },
                { 572,  1433.2900,  -640.1630,    94.5151, 170.50 },
                { 572,  1011.5600,  -680.7190,   120.6600,   0.00 },
                {   7,  2596.8400, -1082.2300,    68.8034, 355.00 },
                { 522,  2815.6900, -1430.6800,    39.3646, 270.00 },
                {   5,  2854.7300, -1355.2700,    10.1226,  90.00 },
                { 522,  2791.4000, -1451.9200,    19.2937, 270.00 },
                {   7,  2429.9800, -1224.3300,    24.9653,   0.00 },
                {   7,  2347.8200, -1226.2900,    21.7907,  90.00 },
                {   7,  2326.7300, -1254.8700,    21.7907, 270.00 },
                {   7,  2390.7600, -1510.2200,    23.3424,  90.00 },
                {   7,  2477.1500, -1555.4900,    23.3424, 180.00 },
                {  -1,  2390.7600, -1490.5700,    23.3424,  90.00 },
                {   7,  2452.9600, -1761.8300,    13.0245, 180.00 },
                {   8,  2700.7500, -1840.5800,     8.8267, 330.00 },
                {   8,  2762.8000, -1873.2200,     9.0866, 180.00 },
                {   8,  2792.7700, -1873.2200,     9.0866, 180.00 },
                {   8,  2812.7300, -1673.4000,     9.0866,   0.00 },
                {   5,  2798.1400, -1562.6300,    10.0545,  90.00 },
                {   7,  2114.0700, -1783.1200,    12.4645, 180.00 },
                {   7,  2159.2700, -1806.8600,    12.4645,   0.00 },
                {   7,  2173.5700, -1806.8600,    12.4645, 180.00 },
                { 549,  2134.7900, -1140.9300,    24.4717,  45.00 },
                { 404,  2135.2600, -1132.4100,    24.9605,  45.00 },
                { 542,  2120.8000, -1131.3500,    24.5445, 310.00 },
                {   5,  2161.4800, -1192.3700,    22.9399,  90.00 },
                {   5,  2147.9500, -1175.6500,    22.9146,  90.00 },
                {   6,  2175.0900,  -994.6210,    62.0610, 170.00 },
                {   5,  2229.5700, -1342.0400,    23.1345, 270.00 },
                {   5,  2229.8000, -1359.5000,    23.1345,  90.00 },
                {   7,  2008.3300, -1275.2100,    22.8181,   0.00 },
                {   7,  1987.5700, -1275.2300,    22.8181, 180.06 },
                { 471,  1279.3700,  -829.7300,  1084.8700,  45.00 },
                { 571,  1269.9800,  -835.0190,  1084.8300,  45.00 },
                {  14,  1065.7500, -1210.8100,    16.0420,   0.00 },
                {  14,  1050.5800, -1192.4800,    19.2507, 180.00 },
                {  14,  1065.7500, -1257.1200,    13.8944,   0.00 },
                {  14,  1050.5800, -1275.6200,    13.0551, 180.00 },
                {  14,  1050.5800, -1358.0000,    12.6475, 180.00 },
                {  14,  1065.7500, -1336.5500,    12.4197,   0.00 },
                {   8,   314.7280, -1809.5800,     3.5003,   0.00 },
                {   8,   343.9660, -1809.5800,     3.7086,   0.00 },
                {   8,   328.0270, -1788.9900,     4.2916, 180.00 },
                {  14,   536.8440, -1290.5900,    16.3186,   0.00 },
                {   2,   741.8860, -1336.1600,    13.1135, 180.00 },
                {   2,   763.6400, -1336.1600,    13.1135, 180.00 },
                {  14,   589.9420, -1511.4200,    14.4620, 270.00 },
                {   4,   767.5420, -1114.4000,    23.6535,  90.00 },
                {  14,   412.6870, -1317.4000,    14.0747, 120.00 },
                {  14,   339.2860, -1342.9200,    14.1742, 300.00 },
                {  14,   341.5550, -1354.3500,    14.1742, 120.00 },
                {  14,   300.6170, -1490.7400,    24.3865, 235.00 },
                {  14,   293.9370, -1513.0000,    24.3865, 235.00 },
                {  14,   298.2850, -1536.3200,    24.3865,  55.00 },
                {   4,   200.8150, -1439.3400,    12.2733, 320.00 },
                {   4,   216.6700, -1431.2900,    12.2733, 135.00 },
                {   8,   424.3600, -1790.6600,     4.6839, 270.00 },
                { 481,   850.7870, -2053.7200,    11.9165,   0.00 },
                {   5,   878.8840, -1658.8000,    12.7191,   0.00 },
                {   5,   844.1090, -1550.7200,    12.9420,  90.00 },
                {   5,   783.0190, -1619.8100,    12.4955, 270.00 },
                {   5,   783.0190, -1605.4900,    12.4955, 270.00 },
                {   4,   700.3720, -1571.0300,    13.3293, 180.00 },
                {  14,  1019.7900, -1434.3200,    12.7158, 180.00 },
                {  14,  1322.6400, -1453.9800,    12.7860, 180.00 },
                {   9,  1132.3300, -1675.8300,    12.9420,  90.00 },
                {   8,  2808.7000, -1952.4900,    11.8779, 270.00 },
                { 574,  2860.1200, -1920.4000,     8.8907, 360.00 },
                {   8,  2860.1200, -2008.6800,     8.8907, 360.00 },
                { 435,  2430.8000, -2107.2100,    10.8944, 180.00 },
                { 435,  2459.4300, -2095.9900,    10.8944, 270.00 },
                {  11,  2476.3800, -1953.5200,    11.0978, 180.00 },
                { 574,  2482.7600, -1953.5200,    11.0978, 180.00 },
                {  11,  2498.7500, -1953.5200,    11.0978, 360.00 },
                { 530,  2456.1600, -2521.6900,    12.7683, 270.00 },
                { 530,  2496.1400, -2375.5400,    11.0989, 225.00 },
                { 453,  2517.8900, -2270.4800,    -2.3200, 270.00 },
                {   7,  2065.6600, -1902.6300,    10.9795,   0.00 },
                { 530,  2110.7400, -2092.9100,    11.0563,   0.00 },
                { 435,  2049.0500, -1940.8100,    12.6693, 270.00 },
                { 435,  2012.0800, -1940.8100,    12.6693, 270.00 },
                { 435,  2041.7100, -1974.4100,    10.8944, 270.00 },
                { 435,  2038.6100, -2061.7300,    10.8944, 270.00 },
                { 435,  1997.6200, -2090.0900,    10.8944, 180.00 },
                { 443,  2120.4700, -2075.8400,    10.8944, 135.00 },
                { 443,  2127.1400, -2084.0000,    10.8944, 135.00 },
                { 435,  2070.3500, -2121.1500,    10.8944, 270.00 },
                {   7,  2056.1600, -1903.7700,    11.1089, 180.00 },
                {   7,  2065.4600, -1919.4000,    11.1089, 180.00 },
                {  11,  2262.2300, -1930.8900,    11.6059, 360.00 },
                {  11,  2373.9400, -1927.6900,    11.3076, 360.00 },
                {  11,  2393.3100, -1927.6900,    11.3076, 180.00 },
                { 530,  2164.6800, -2306.1300,    11.0740,   0.00 },
                { 435,  2010.6400, -2126.1700,    10.8944, 180.00 },
                { 435,  2133.4900, -2134.8800,    10.8944,  45.00 },
                { 435,  2126.9800, -2140.8200,    10.8944,  45.00 },
                { 435,  2120.7500, -2148.0000,    10.8944,  45.00 },
                { 435,  1668.6500, -1883.8000,    12.6524, 180.00 },
                { 435,  1661.7200, -1883.8000,    12.6524, 180.00 },
                { 574,  1636.3400, -1883.8000,    12.6524, 180.00 },
                {  16,  1398.2300, -2349.7600,    12.6524, 180.00 },
                {  16,  1408.0100, -2349.7600,    12.6524, 180.00 },
                { 519,  1563.9400, -2454.9500,    12.6524, 360.00 },
                {  16,  1398.2300, -2332.6100,    12.6524, 180.00 },
                {  16,  1408.0100, -2332.6100,    12.6524, 180.00 },
                { 485,  1725.5200, -2454.9500,    12.6524, 360.00 },
                { 608,  1876.5100, -2428.7100,    12.6524, 225.00 },
                { 593,  1926.3500, -2289.6400,    12.6524, 270.00 },
                { 517,  1661.9400, -1136.1200,    23.0332, 180.00 },
                { 507,  1657.4600, -1111.5000,    23.0332,  90.00 },
                { 565,  1704.9700, -1069.0300,    23.0332, 360.00 },
                { 527,  1744.4900, -1085.7600,    23.2592, 360.00 },
                { 517,  1771.3900, -1061.6400,    23.4897, 360.00 },
                { 507,  1752.6500, -1045.9300,    23.4897, 360.00 },
                { 517,  1707.6300, -1035.7800,    23.4897, 360.00 },
                { 527,  1583.9100, -1047.5200,    23.0332, 307.49 },
                { 422,  1616.7900, -1123.6500,    23.0332,  90.00 },
                {   9,  1530.5800, -1644.6600,     5.4085, 180.00 },
                {   9,  1545.6300, -1684.2300,     5.4085, 270.00 },
                {   9,  1602.0600, -1700.3700,     5.4085,  90.00 },
                {   9,  1562.9100, -1710.5900,     5.4085, 180.00 },
                {   9,  1671.4100, -1712.8000,    19.5252, 270.00 },
                {   9,  1666.7000, -1694.8900,    14.6746,   0.00 },
                {   5, -1986.6900,   248.9350,    34.1691,  90.00 },
                {   5, -1986.6900,   257.4070,    34.1691,  90.00 },
                {   0, -2125.2000,  -760.5340,    31.1186,  89.00 },
                {   0, -2134.0400,  -793.6640,    31.1186,  89.00 },
                {   0, -2149.1700,  -793.5140,    31.1186, 270.50 },
                {   0, -2149.0000,  -837.5720,    31.1186, 270.50 },
                {   0, -2148.9700,  -841.0270,    31.1186,  90.50 },
                {   0, -2125.4200,  -814.8890,    31.1186,  90.50 },
                {   0, -2134.2300,  -885.5350,    31.1186, 270.00 },
                {   0, -2134.3700,  -898.5190,    31.1186,  90.50 },
                {   0, -2149.5300,  -944.1650,    31.1186,  90.50 },
                {   0, -2134.2100,  -965.2280,    31.1186, 269.00 },
                {  11, -1670.3800,   441.6630,     6.5014, 172.85 },
                {  11, -1663.7000,   438.0640,     6.5014, 172.85 },
                { 584, -1650.9100,   446.3250,     6.3580, 225.00 },
                { 472, -1166.6600,   377.2810,     0.0000, 313.00 },
                { 472, -1113.4900,   328.0450,     0.0000, 313.00 },
                { 595, -1431.9500,   360.5460,     0.0000, 268.00 },
                {  11, -1529.1400,   377.2270,     6.2204, 270.00 },
                {  11, -1528.9400,   381.7680,     6.2204, 270.00 },
                { 433, -1460.1400,   319.7650,     6.2204, 360.00 },
                { 470, -1247.0300,   442.0940,     6.2204,  25.00 },
                {   2, -2222.7800,   306.5180,    34.1794,   0.00 },
                {   2, -2167.3500,   293.3720,    34.1794,   0.00 },
                { 485, -1390.9300,  -231.1960,    13.1500, 240.00 },
                { 552, -1361.3000,  -253.1890,    13.6500, 315.00 },
                { 522, -1302.4900,  -676.7710,    13.6500, 360.00 },
                { 485, -1322.1200,  -467.4540,    13.6500, 215.00 },
                { 608, -1332.9800,  -450.2210,    13.6500, 215.00 },
                { 485, -1250.9600,  -312.1360,    13.6500, 273.43 },
                { 608, -1355.5300,  -622.8510,    13.6500,  38.08 },
                { 552, -1317.0200,  -361.3050,    13.6500, 191.40 },
                { 583, -1315.6200,  -273.0850,    13.6500,  34.40 },
                { 485, -1275.3500,  -615.5580,    13.6500,   5.41 },
                {  16, -1474.7100,  -133.4240,     5.2430,  89.40 },
                {  16, -1440.3200,  -143.2400,     5.2430, 359.40 },
                {  16, -1443.7700,  -224.3860,     5.2430, 269.40 },
                {  16, -1425.5000,  -191.8870,     5.2430,  89.40 },
                {  16, -1474.9200,  -167.3060,     5.2430, 269.40 },
                {  16, -1386.5800,  -191.8870,     5.2430,  89.40 },
                {  16, -1368.0700,  -142.2420,     5.2430, 359.40 },
                { 606, -1230.6100,  -110.0510,    13.6500,  70.00 },
                { 485, -1238.5000,  -107.4220,    13.6500,  75.00 },
                { 552, -1379.8500,  -179.7640,    13.6500, 245.00 },
                { 472, -1151.2200,  -482.6070,     0.0000, 149.50 },
                { 472, -1366.7800,  -702.1060,     0.0000,  91.00 },
                { 472, -1606.4900,  -703.2290,     0.0000,  91.00 },
                { 472, -1742.3400,  -441.0290,     0.0000, 182.00 },
                { 607, -1224.5700,  -115.6790,    13.6500,  70.00 },
                { 607, -1417.0800,  -224.3820,    13.1500, 320.00 },
                { 608, -1404.3200,  -226.4300,    13.1500, 250.00 },
                { 591, -1726.2600,  -157.2380,     2.5765,  47.50 },
                { 591, -1730.2100,  -160.9730,     2.5765,  47.50 },
                { 450, -1853.0500,  -189.9020,    17.5303, 180.50 },
                { 541, -1818.9300,  -182.7010,     8.3931,  89.00 },
                {   0, -1897.3700,  -900.0290,    31.1186, 269.00 },
                {   0, -1872.2800,  -930.6400,    31.1186, 269.00 },
                {   0, -1872.1000,  -823.8960,    31.1186, 269.00 },
                {   0, -1897.4100,  -852.9840,    31.1186,  91.00 },
                {   0, -1887.3300,  -753.9730,    31.1186,  91.00 },
                {   5, -2686.5600,   -55.0934,     6.1875,   0.50 },
                {   5, -2666.4200,   -54.8986,     6.1875, 180.50 },
                {   5, -2627.1000,   -55.2050,     6.1875,   0.50 },
                {   5, -2670.1700,   -36.0131,     6.1875,   0.50 },
                {   5, -2630.8700,   -35.4520,     6.1875, 180.50 },
                {   5, -2796.2400,    97.2394,     6.1875,  90.50 },
                {   5, -2796.2800,   135.6670,     6.1875, 270.50 },
                {   5, -2796.7800,   -55.7916,     6.1875,  90.50 },
                { 509, -2796.5300,   -23.7695,     6.2738,  90.50 },
                { 510, -2796.5300,   140.5910,     6.2738,  90.50 },
                {   5, -2696.8400,  -146.8100,     6.1875,  90.50 },
                {   4, -2757.5200,  -295.7460,     6.1875, 180.50 },
                {   4, -2771.7200,  -281.9270,     6.1875, 180.50 },
                {   4, -2742.0800,  -282.2090,     6.1875,   0.50 },
                {   4, -2741.9600,  -301.9060,     6.1875,  50.50 },
                {   4, -2765.9300,  -312.3780,     6.1875,   0.50 },
                { 481, -2796.5300,  -115.4070,     6.2738,  90.50 },
                { 582, -2531.9500,  -601.3450,   131.9310,   0.00 },
                { 424, -2917.4000,  -616.6680,     3.2267,  55.50 },
                { 588, -2318.8500,  -126.6660,    34.3705, 180.50 },
                {   7, -2326.3200,  -126.3000,    34.3705, 180.50 },
                {   7, -2352.3700,  -125.8030,    34.3705,   0.50 },
                {  10, -2520.7500,  -601.3450,   131.9310, 180.00 },
                {  10, -2401.4100,  -587.1140,   131.6740, 305.00 },
                {  10, -2399.6500,  -589.6260,   131.6740, 125.00 },
                { 437, -2399.3100,  -603.8310,   131.6740, 275.00 },
                {   7, -2265.3700,   212.5270,    34.1654,  90.50 },
                {   7, -2265.2500,   204.8340,    34.1654,  90.50 },
                {   2, -2410.9300,   328.8730,    34.1654, 150.50 },
                { 428, -2442.7100,   523.0880,    28.9670,   0.50 },
                { 428, -2429.7500,   515.6350,    28.9670, 215.50 },
                {   4, -2422.4500,   521.9250,    28.9670, 220.50 },
                { 402, -2493.0600,   378.8060,    26.7945,  60.50 },
                {   4, -2497.6800,   370.2890,    26.7945,  60.50 },
                {   4, -2502.3500,   382.1090,    34.1873,  60.50 },
                {   4, -2510.0900,   367.5620,    34.1873,  60.50 },
                {   4, -2505.4700,   339.9630,    34.1873,  60.50 },
                {   4, -2473.7500,   410.3010,    26.7693, 135.50 },
                {   4, -2479.9500,   416.2120,    26.7693, 135.50 },
                {   4, -2483.4000,   419.0070,    26.7693, 315.50 },
                {   4, -2533.0300,   307.5100,    34.1873, 250.50 },
                {   4, -2531.9100,   311.2410,    34.1873, 250.50 },
                { 559, -2750.3100,   200.2120,     6.2275,  35.00 },
                {   5, -2671.6000,   267.6800,     3.3195,   0.50 },
                {   4, -2585.8000,   311.1360,     3.9325, 270.50 },
                { 568, -2936.7300,   447.2150,     2.5890, 130.50 },
                {   7, -2265.5500,   113.3600,    34.1654,  90.50 },
                {   7, -2265.1800,   133.0720,    34.1654,  90.50 },
                {   7, -2266.7500,    89.2673,    34.1654, 270.50 },
                {   7, -2268.6900,    65.8702,    34.1654, 270.50 },
                { 483, -2461.2200,    -5.5510,    27.0953, 270.00 },
                { 473, -2607.1800,  2990.5000,     0.1000, 269.02 },
                {   4, -2272.4900,  2285.3000,     3.9828, 270.00 },
                {   5, -2464.7000,  2225.3800,     3.9828, 180.00 },
                {   5, -2473.4500,  2225.3800,     3.9828, 180.00 },
                { 487, -2227.7600,  2327.1500,     6.5707, 180.00 },
                { 484, -2392.0100,  2305.3000,     0.1000, 222.76 },
                { 484, -2319.7800,  2297.0000,     0.1000, 177.64 },
                { 446, -2998.1800,  2594.6100,     0.1000, 178.20 },
                { 472, -2997.4800,  2860.7700,     0.1000,  44.60 },
                { 446, -2999.5200,  2347.7200,     0.1000,  45.98 },
                { 446, -2618.8400,  2160.1200,     0.1000, 302.62 },
                {   9, -1804.4600,  1293.5400,    52.3540, 175.00 },
                {   9, -1798.6100,  1293.4000,    59.9004, 175.00 },
                {   9, -1792.6900,  1293.1800,    41.8947, 175.00 },
                {   9, -1803.0800,  1312.9300,    59.9004, 355.00 },
                {   9, -1797.2300,  1312.4700,    41.1694, 355.00 },
                {   9, -1791.4800,  1312.2100,    41.1694, 355.00 },
                {   9, -1779.6000,  1311.5700,    32.2190, 355.00 },
                {   0, -1687.9400,  1007.8300,    18.0977, 270.00 },
                {   0, -1687.9400,  1000.0800,    18.0977,  90.00 },
                {   0, -1687.2200,   995.6680,    18.0977, 270.00 },
                {   0, -1687.9400,   983.3690,    18.0977, 270.00 },
                {   0, -1696.9400,   978.1820,    18.0977,   0.00 },
                {   0, -1696.8600,  1058.0700,    18.0977,   0.00 },
                {   0, -1736.3800,  1057.3800,    18.0977, 265.00 },
                {   0, -1736.3800,  1040.7500,    18.0977, 270.00 },
                {   0, -1736.3800,  1032.5700,    18.0977,  95.00 },
                {   0, -1719.8600,   999.8690,    18.0977, 270.00 },
                {   0, -1687.9400,  1007.8300,    10.4863, 270.00 },
                {   0, -1687.9400,  1000.0800,    10.4863,  90.00 },
                {   0, -1687.2200,   995.6680,    10.4863, 270.00 },
                {   0, -1687.9400,   983.3690,    10.4863, 270.00 },
                {   0, -1696.8600,  1058.0700,    10.4863,   0.00 },
                {   0, -1736.3800,  1057.3800,    10.4863, 265.00 },
                {   0, -1736.3800,  1040.7500,    10.4863, 270.00 },
                {   0, -1736.3800,  1032.5700,    10.4863,  95.00 },
                {   0, -1719.8600,   999.8690,    10.4863, 270.00 },
                {   9, -1655.7800,  1315.2500,     7.7917, 315.00 },
                {   9, -1649.2200,  1307.2800,     7.7917, 315.00 },
                {   9, -1637.7600,  1296.6200,     7.7917, 130.00 },
                {   0, -1638.4100,  1090.6300,     9.2133, 270.00 },
                { 510, -1481.2400,   998.8560,     6.7774, 275.00 },
                {   0, -1659.6400,  1212.8700,     7.0924, 285.00 },
                {   0, -1649.7700,  1207.4000,    21.1180,  60.00 },
                {   0, -1659.8400,  1207.5600,    21.1180, 300.00 },
                {   0, -1661.8400,  1219.7900,    21.1180, 215.00 },
                { 453, -1456.2500,  1025.4900,     0.2116, 280.00 },
                { 452, -1462.4800,  1091.3600,     0.2116, 260.00 },
                { 473, -1566.6800,  1261.9700,     0.2116, 270.00 },
                { 484, -1719.5400,  1433.3400,     0.2116, 355.00 },
                {   9, -1830.9600,  1309.3300,    59.9004,  20.00 },
                {   9, -1842.4000,  1305.3200,    43.8425,  20.00 },
                {   9, -1853.5800,  1301.1100,    51.5826,  20.00 },
                {   9, -1834.7300,  1287.2000,    51.1195, 200.00 },
                {   9, -1823.4800,  1291.1500,    59.9004, 200.00 },
                {   9, -1816.8400,  1292.8500,    42.4263, 185.00 },
                {   9, -1811.0300,  1293.4200,    59.9004, 185.00 },
                {   9, -1822.2000,  1310.8200,    31.7982,   5.00 },
                {   9, -1816.5200,  1311.5700,    31.7982,   5.00 },
                {   9, -1811.0900,  1312.3700,    59.9004,   5.00 },
                {   9, -1836.7900,  1307.1600,    32.7462,  20.00 },
                {   9, -1829.2500,  1289.5900,    59.9004, 200.00 },
                {   5, -2180.5900,  1006.1400,    80.0403,   0.00 },
                {   5, -2180.5900,   993.3360,    80.0403,   0.00 },
                {   5, -2205.9800,  1047.1800,    79.7224,   0.00 },
                {   5, -2106.7900,  1002.7400,    70.9292,   0.00 },
                {   5, -2106.7900,  1056.9600,    70.9292, 180.00 },
                {   5, -2020.5400,  1027.8700,    55.4798, 275.00 },
                {   5, -2059.1000,  1113.0700,    53.6518,  10.00 },
                {   5, -2052.4100,  1112.0000,    53.6518, 360.00 },
                {   5, -2046.3700,  1112.7800,    53.6518, 330.00 },
                {   5, -2150.8700,  1220.1500,    48.0423, 270.00 },
                {   5, -2128.0700,  1220.1500,    48.0423, 270.00 },
                {   5, -2003.5300,  1324.1000,    11.8704, 270.00 },
                {   9, -1972.5300,  1323.3000,    11.8704, 270.00 },
                { 453, -1892.1800,  1400.2900,     0.2116,  95.00 },
                {   9, -1639.1700,   661.8000,    -6.2414, 270.00 },
                {   9, -1639.1700,   657.6660,    -6.2414, 270.00 },
                {   9, -1639.1700,   653.5330,    -6.2414, 270.00 },
                {   9, -1639.1700,   649.4000,    -6.2414, 270.00 },
                {   9, -1622.3500,   649.4000,    -6.2414,  90.00 },
                {   9, -1622.3500,   653.6480,    -6.2414,  90.00 },
                {   0, -1800.8600,   821.2920,    24.9037, 165.00 },
                {   0, -1800.3900,   810.3820,    24.9037, 190.00 },
                {   0, -1800.8600,   799.4720,    24.9037, 180.00 },
                {   0, -1799.7300,   788.5620,    24.9037, 180.00 },
                {   0, -1731.1400,   752.6000,    24.9037, 275.00 },
                { 446, -1475.2300,   686.3900,     0.2116,   0.00 },
                { 454, -1475.2300,   700.8340,     0.2116,   0.00 },
                {   0, -1915.9800,   792.6640,    39.6091, 270.00 },
                {   5, -2082.3700,   788.9190,    68.6648,   0.00 },
                {   5, -2082.4300,   845.0430,    69.3248,   0.00 },
                {   5, -2082.8500,   834.0190,    69.3248, 185.00 },
                {   5, -2070.0400,   969.1800,    62.7138,  30.00 },
                {   9, -2102.2400,   649.8900,    53.2472, 270.00 },
                {   9, -2126.2100,   649.8900,    53.2472,  90.00 },
                {   9, -2214.0800,   616.0700,    35.3884, 180.00 },
                {   9, -2220.2900,   608.5800,    35.3884, 260.00 },
                {   2,  1215.9100, -1094.2900,    25.0146, 270.00 },
                {  14,  1112.0600, -1152.4700,    22.9199, 270.00 },
                {  14,  1297.5900, -1137.6700,    22.9199,  90.00 },
                {  14,   983.6880, -1137.6700,    22.9199,  90.00 },
                {   2,   852.2240, -1137.6700,    22.9199,  90.00 },
                {   2,   891.8990, -1152.4700,    22.9199, 270.00 },
                {   9,  1342.0800,  1744.6000,    10.0459,   0.00 },
                {  16,  1325.0600,  1278.8100,    10.0459,   0.00 },
                {  16,  1305.8000,  1278.8100,    10.0459,   0.00 },
                { 519,  1328.7400,  1583.2000,     9.8222, 270.00 },
                { 593,  1317.4400,  1451.7400,     9.8222, 180.00 },
                { 417,  1286.9900,  1449.6800,     9.8222, 270.00 },
                { 593,  1352.1600,  1779.0700,     9.8222, 270.00 },
                { 593,  1370.9800,  1228.0600,     9.8222,   0.00 },
                { 593,  1331.7900,  1451.8900,     9.8222, 180.00 },
                { 593,  1304.0800,  1451.7400,     9.8222, 180.00 },
                { 593,  1352.1600,  1790.5400,     9.8222, 270.00 },
                { 519,  1328.7400,  1612.3600,     9.8222, 270.00 },
                {   2,  1381.4800,  1034.1800,     9.8222,   0.00 },
                {   5,  1384.8900,   770.5930,     0.0000,   0.00 },
                {   2,  1455.0600,   906.1430,    10.0561,   0.00 },
                {   2,  1444.4200,   906.1430,    10.0561,   0.00 },
                {   4,  1381.9100,  1057.4700,    10.0561,   0.00 },
                {   5,  1412.8000,   708.1320,     9.8222,   0.00 },
                {   4,  1435.7900,   931.8930,    11.0213,   0.00 },
                {   5,  1412.8000,   746.4200,     9.8222,   0.00 },
                { 598,  2251.7000,  2459.9200,     9.9190, 180.00 },
                { 598,  2260.2400,  2459.9200,     9.9190,   0.00 },
                { 598,  2277.8800,  2477.3600,     9.9190, 180.00 },
                { 598,  2256.1000,  2470.1900,     9.9190,  90.00 },
                { 598,  2263.6300,  2474.5000,     2.5558,   0.00 },
                { 598,  2314.6000,  2475.1500,     2.5558,  90.00 },
                { 598,  2272.3000,  2443.2900,     2.5558, 270.00 },
                { 598,  2259.7000,  2430.9400,     2.5558,   0.00 },
                { 598,  2263.9900,  2430.9400,    -8.2231,   0.00 },
                { 598,  2276.9400,  2430.9400,    -8.2231,   0.00 },
                { 598,  2303.3600,  2430.9400,    -8.2231, 180.00 },
                { 598,  2315.0000,  2495.2600,    -8.2231,  90.00 },
                { 598,  2239.6800,  2471.2400,    -8.2231,  90.00 },
                {   5,  2403.6000,  2547.3200,    22.0358,  90.00 },
                {   5,  2403.6000,  2561.7700,     9.9532,  90.00 },
                {  12,  2053.0300,  2479.9800,    10.4001,   0.00 },
                {  12,  2076.4500,  2468.6900,    10.4001, 180.00 },
                {  12,  2126.6700,  2468.6900,    10.4001,   0.00 },
                {  12,  2153.5500,  2490.7200,    10.4001, 270.00 },
                {  12,  2205.7200,  2474.9100,    10.4001,   0.00 },
                {  12,  2194.3800,  2470.4600,    10.4001, 180.00 },
                {  -1,  2524.6500,  2769.1200,    10.1598, 180.00 },
                {  -1,  2533.0600,  2769.1200,    10.1598,   0.00 },
                {  -1,  2566.2900,  2791.0500,    10.1598,   0.00 },
                {  -1,  2562.0400,  2769.1700,    10.1598,   0.00 },
                {  -1,  2586.4200,  2772.5900,    10.1598, 270.00 },
                {  -1,  2549.7000,  2747.3400,    10.1598,   0.00 },
                {  -1,  2570.3800,  2747.3400,    10.1598, 180.00 },
                {  -1,  2524.6500,  2738.0000,    10.1598,   0.00 },
                {  -1,  2533.0100,  2728.0100,    10.1598,   0.00 },
                {  -1,  2528.8400,  2719.4500,    10.1598,   0.00 },
                {  -1,  2505.3300,  2719.5900,    10.1598,  90.00 },
                {  -1,  2505.3300,  2731.8600,    10.1598, 270.00 },
                { 453,  2513.9100,  3014.7200,     1.0000, 330.00 },
                { 453,  3005.5900,  2989.6900,     1.0000,  45.00 },
                {   9,  2868.4800,  2424.7400,    10.4108,  45.00 },
                {   9,  2814.4800,  2406.5500,    10.4108, 315.00 },
                {   9,  2853.0500,  2372.0200,    10.4108,  90.00 },
                {   9,  2841.1300,  2338.4700,    10.4108, 270.00 },
                {   0,  2471.4300,  2529.8400,    22.0358, 180.00 },
                {   0,  2433.9300,  2529.8400,    22.0358, 360.00 },
                {   0,  2530.4200,  2520.9800,    22.0358, 270.00 },
                {   0,  2530.4200,  2491.4100,    22.0358, 270.00 },
                {   0,  2506.8700,  2499.8900,    22.0358, 270.00 },
                {   0,  2476.2700,  2496.5700,    22.0358, 360.00 },
                {   0,  2530.4200,  2491.3800,     9.9532, 270.00 },
                {   0,  2471.4300,  2529.8400,     9.9532, 180.00 },
                {   5,  2444.9200,  2547.4600,     9.9532, 180.00 },
                {   0,  2433.9300,  2529.8400,     9.9532, 360.00 },
                { 453,  3011.3800,  2596.5400,     1.0000, 225.00 },
                {  12,  2440.6700,  2021.1200,    10.2520,  90.00 },
                {  12,  2440.6700,  2009.4600,    10.2520, 270.00 },
                {  12,  2453.7600,  1991.0700,    10.2520, 180.00 },
                {  12,  2233.1400,  2007.1000,    10.4001, 180.00 },
                {  12,  2232.4000,  1998.9000,    15.5912, 180.00 },
                {  12,  2289.9000,  1971.5700,    30.8375,   0.00 },
                {  12,  2276.1300,  1939.1500,     9.0071,   0.00 },
                {  12,  2269.0000,  1952.8000,    14.6647,   0.00 },
                {  12,  2283.5000,  1953.1700,    25.3283,   0.00 },
                {  12,  2235.1300,  2038.6500,    10.4001, 270.00 },
                {  12,  2216.6800,  2034.6900,    10.4001,  90.00 },
                {  12,  2258.2300,  2062.8500,    10.4001, 360.00 },
                {  12,  2170.8200,  1822.2200,    10.4001, 360.00 },
                {  12,  2198.9700,  1810.1800,    10.4001, 180.00 },
                {   0,  2564.7300,  2279.7700,    10.1270,  90.00 },
                {   0,  2582.3200,  2279.0600,    10.1270, 270.00 },
                {   0,  2593.1300,  2267.8900,    10.1270, 270.00 },
                {   0,  2580.5100,  2250.6000,    10.1270, 180.00 },
                {   0,  2594.1700,  2250.6000,    10.1270, 360.00 },
                {   0,  2610.6200,  2266.8900,    10.1270,  90.00 },
                {   0,  2610.9700,  2279.5500,    10.1270, 270.00 },
                {   0,  2564.7300,  2271.1200,    10.1270,  90.00 },
                { 510,  2822.4000,  2160.0100,    10.3419, 270.00 },
                {  12,  2606.4600,  2072.0200,    10.1435, 270.00 },
                {  12,  2629.9200,  2009.0400,    10.1435,   0.00 },
                {  12,  2636.5800,  1987.9700,    10.1435, 180.00 },
                {  12,  2559.3400,  2058.7100,    10.1435,   0.00 },
                {  12,  2588.2500,  2053.1200,    10.1435, 273.45 },
                {  12,  2605.3900,  2086.1300,    10.1435, 180.00 },
                {  12,  2616.4900,  2099.6400,    10.1435, 360.00 },
                {  12,  2578.8500,  1989.5900,    10.1435,  85.17 },
                {  12,  2590.4400,  1967.2900,    10.1435, 183.53 },
                { 453,  3011.3800,  2012.2600,     1.0000, 300.00 },
                { 481,  2159.0700,  2799.6300,    10.1598,   0.00 },
                {  11,  2142.1900,  2810.5300,    10.1598,  90.00 },
                {  11,  2167.8300,  2787.6800,    10.1598, 180.00 },
                { 574,  2261.4300,  2770.6200,    10.1598,  90.00 },
                {  11,  2347.8500,  2754.6000,    10.1598, 270.00 },
                {  11,  2167.3800,  2754.5700,    10.1598, 270.00 },
                {  11,  2167.3800,  2744.2600,    10.1598, 270.00 },
                {  11,  2167.3800,  2720.8100,    10.1598,  90.00 },
                {  11,  2146.5900,  2756.5900,    10.1598, 270.00 },
                {   5,  2331.8600,  2577.9400,    10.4001, 185.58 },
                { 443,  2399.9800,  2799.8900,    10.1598, 270.00 },
                {  11,  2347.8500,  2771.5200,    10.1598,  90.00 },
                {  -1,  2772.4100,  1293.9600,    10.0500,   0.00 },
                {  -1,  2785.2200,  1293.9600,    10.0500,   0.00 },
                {  -1,  2791.5400,  1294.0400,    10.0500,   0.00 },
                {  -1,  2766.5100,  1268.7400,    10.0500,  90.00 },
                {  -1,  2766.5100,  1278.4000,    10.0500,  90.00 },
                {  -1,  2805.9300,  1332.4900,    10.0500,  90.00 },
                {  -1,  2805.9300,  1345.4400,    10.0500,  90.00 },
                {  -1,  2805.9300,  1326.0600,    10.0500,  90.00 },
                {  -1,  2805.9300,  1351.6900,    10.0500,  90.00 },
                {  -1,  2805.9300,  1364.5100,    10.0500,  90.00 },
                {   5,  2813.5000,  1373.9200,    10.0500,   0.00 },
                {   5,  2842.5500,  1373.9200,    10.0500,   0.00 },
                {   5,  2848.9900,  1373.9200,    10.0500,   0.00 },
                {   5,  2852.1500,  1364.5600,    10.0500, 270.00 },
                {   5,  2852.1500,  1354.8600,    10.0500, 270.00 },
                {   5,  2852.1500,  1348.4600,    10.0500, 270.00 },
                { 453,  3006.7700,  1253.9000,     0.0000, 180.00 },
                {   9,  2489.7800,  1407.1100,    10.0500,   0.00 },
                {   9,  2454.4200,  1427.0700,    10.0500,   0.00 },
                {   9,  2476.7100,  1427.0700,    10.0500,   0.00 },
                {  12,  2454.2400,  1267.8200,    10.0500, 180.00 },
                {  12,  2444.6700,  1267.8200,    10.0500, 180.00 },
                {  12,  2455.3800,  1347.5100,    10.0500, 180.00 },
                {  12,  2464.9300,  1347.5100,    10.0500, 180.00 },
                {  12,  2443.2600,  1355.0500,    10.0500,  90.00 },
                {  12,  2443.2600,  1335.9000,    10.0500,  90.00 },
                {  12,  2471.3800,  1355.4900,    10.0500, 360.00 },
                {  12,  2348.7300,  1469.4600,    10.0500, 270.00 },
                {  -1,  2511.0500,   934.9750,    10.0500, 360.00 },
                {  -1,  2461.6900,   925.1720,    10.0500,  90.00 },
                {  12,  2570.6700,  1036.1700,    10.0500, 360.00 },
                {   6,  2824.0700,   925.9850,    10.0500,   0.00 },
                {   6,  2807.9800,   940.9670,    10.0500, 180.00 },
                {  12,  2585.2900,  1036.1700,    10.0500, 360.00 },
                {   6,  2830.4700,   940.9670,    10.0500, 180.00 },
                {   6,  2626.3500,   746.7090,    10.0500,   0.00 },
                {   6,  2554.7700,   746.7090,    10.0500,   0.00 },
                {   6,  2325.4700,   648.6460,    10.2500,   0.00 },
                {   6,  2569.2400,   746.7090,    10.0500,   0.00 },
                {   6,  2647.8300,   746.7090,    10.0500,   0.00 },
                {   6,  2389.8900,   697.5170,    10.2500, 180.00 },
                {   6,  2406.2500,   727.6140,    10.2500,   0.00 },
                {   6,  2441.9100,   707.2920,    10.2500, 270.00 },
                {   6,  2441.9100,   654.8950,    10.2500, 270.00 },
                { 493,  3006.7700,   716.0100,     0.0000,   0.00 },
                { 453,  2362.0400,   519.0800,     0.6790, 270.00 },
                { 486,  2711.8300,   822.5040,    10.0011,   0.00 },
                {  12,  2143.0400,  1009.8100,    10.0500,  90.00 },
                {  12,  1844.8600,  1161.5000,    10.0500,  90.00 },
                {  -1,  2205.5500,   935.7360,    10.0500,   0.00 },
                {  12,  2160.8700,  1028.9100,    10.0500, 270.00 },
                {  12,  2040.1500,  1135.5500,    10.0500, 180.00 },
                {  12,  2040.1500,  1061.4300,    10.0500, 180.00 },
                {  12,  2040.1500,  1077.5700,    10.0500, 180.00 },
                {  12,  2040.1500,  1025.1900,    10.0500, 180.00 },
                {  12,  2040.1500,  1041.3300,    10.0500, 180.00 },
                {  12,  2040.1500,   993.3820,    10.0500, 180.00 },
                {  12,  2040.1500,   937.5240,    10.0500, 180.00 },
                {  12,  2040.1500,   953.6680,    10.0500, 180.00 },
                {  12,  2074.6500,  1176.8200,    10.0500,   0.00 },
                {  12,  2074.6500,  1143.5100,    10.0500,   0.00 },
                {  12,  2074.6500,  1135.5500,    10.0500,   0.00 },
                {  12,  2074.6500,  1077.5700,    10.0500,   0.00 },
                {  12,  2074.6500,  1061.4300,    10.0500,   0.00 },
                {  12,  2074.6500,   993.3820,    10.0500,   0.00 },
                {  12,  2074.6500,   953.6680,    10.0500,   0.00 },
                {  12,  2074.6500,   937.5240,    10.0500,   0.00 },
                {  12,  2131.1300,  1025.7600,    10.0500, 270.00 },
                {  12,  2131.1800,  1012.9800,    10.0500, 270.00 },
                {  12,  1881.5700,   957.4690,    10.0500,  90.00 },
                {  12,  1881.5700,   960.4920,    10.0500,  90.00 },
                {  12,  1881.5700,   963.6290,    10.0500,  90.00 },
                {  12,  1881.5700,   988.5010,    10.0500,  90.00 },
                {  12,  1881.5700,  1064.1500,    10.0500,  90.00 },
                {   6,  1938.8200,   708.3390,    10.0500, 180.00 },
                {   6,  1916.3900,   695.6740,    10.0500,   0.00 },
                { 493,  2297.7300,   519.0800,     0.6790, 270.00 },
                {   6,  2127.8600,   736.9080,    10.2500, 180.00 },
                {   6,  2005.2800,   738.3160,    10.2500, 180.00 },
                {   6,  2131.0300,   770.2640,    10.2500,   0.00 },
                {   6,  2163.8800,   778.2070,    10.2500, 270.00 },
                {   6,  2129.0900,   656.9350,    10.2500, 180.00 },
                {   6,  2266.1900,   649.3470,    10.2500,   0.00 },
                {   6,  2169.3000,   697.5170,    10.2500, 180.00 },
                {   6,  2265.5800,   725.7810,    10.2500,   0.00 },
                {   6,  2005.6600,   688.1600,    10.2500,   0.00 },
                {   6,  1851.1300,   655.1080,    10.0500,  90.00 },
                {   6,  1852.9600,   725.7440,    10.0500,  90.00 },
                {  12,  2051.2400,  1725.2100,    10.0500, 155.00 },
                {  12,  2061.7800,  1747.9900,    10.0500, 155.00 },
                {  12,  2071.6000,  1766.4400,    10.0500, 155.00 },
                {  12,  2074.5700,  1772.8800,    10.0500, 155.00 },
                {  12,  2098.0600,  1750.0200,    10.0500, 335.00 },
                {  12,  2101.1000,  1755.7600,    10.0500, 335.00 },
                {  12,  2088.4800,  1730.8300,    10.0500, 335.00 },
                {  12,  2074.6500,  1695.3900,    10.0500,   0.00 },
                {  12,  2074.6500,  1660.0500,    10.0500,   0.00 },
                {  12,  2074.6500,  1622.3900,    10.0500,   0.00 },
                {  12,  2074.6500,  1569.6600,    10.0500,   0.00 },
                {  12,  2074.6500,  1559.9300,    10.0500,   0.00 },
                {  12,  2074.6500,  1502.4500,    10.0500,   0.00 },
                {  12,  2074.6500,  1484.8300,    10.0500,   0.00 },
                {  12,  2074.6500,  1458.8400,    10.0500,   0.00 },
                {  12,  2074.6500,  1414.6200,    10.0500,   0.00 },
                {  12,  2074.6500,  1390.3300,    10.0500,   0.00 },
                {  12,  2074.6500,  1354.8100,    10.0500,   0.00 },
                {  12,  2074.6500,  1343.2900,    10.0500,   0.00 },
                {  12,  2074.6500,  1314.4700,    10.0500,   0.00 },
                {  12,  2074.6500,  1239.5500,    10.0500,   0.00 },
                {  12,  2074.6500,  1231.3700,    10.0500,   0.00 },
                {  12,  2123.1800,  1409.3200,    10.0500, 180.00 },
                {  12,  2145.5700,  1397.4400,    10.0500,   0.00 },
                {  12,  2119.9900,  1397.4400,    10.0500,   0.00 },
                {  12,  2305.2900,  1480.1200,    42.7191,  90.00 },
                {  12,  2282.4700,  1515.4100,    10.0500, 360.00 },
                {  12,  1844.3100,  1244.8000,    10.0500,  90.00 },
                {  12,  2040.1500,  1687.7300,    10.0500, 180.00 },
                {  12,  2040.1500,  1559.9300,    10.0500, 180.00 },
                {  12,  2040.1500,  1546.5500,    10.0500, 180.00 },
                {  12,  2040.1500,  1606.8300,    10.0500, 180.00 },
                {  12,  2040.1500,  1648.9500,    10.0500, 180.00 },
                {  12,  2040.1500,  1695.3900,    10.0500, 180.00 },
                {  12,  2040.1500,  1581.9800,    10.0500, 180.00 },
                {  12,  2040.1500,  1502.4500,    10.0500, 180.00 },
                {  12,  2040.1500,  1484.8300,    10.0500, 180.00 },
                {  12,  2040.1500,  1425.6100,    10.0500, 180.00 },
                {  12,  2040.1500,  1418.2200,    10.0500, 180.00 },
                {  12,  2040.1500,  1398.5100,    10.0500, 180.00 },
                {  12,  2040.1500,  1382.3700,    10.0500, 180.00 },
                {  12,  2040.1500,  1335.3400,    10.0500, 180.00 },
                {  12,  2040.1500,  1351.4800,    10.0500, 180.00 },
                {  12,  2040.1500,  1303.0100,    10.0500, 180.00 },
                {  12,  2040.1500,  1223.4100,    10.0500, 180.00 },
                {  12,  2040.1500,  1239.5500,    10.0500, 180.00 },
                {   9,  2482.2900,  1674.2700,    10.0500,   0.00 },
                {  12,  2603.8400,  1856.1900,    10.0500,  90.00 },
                {   9,  2599.6700,  1681.4100,    10.0500, 270.00 },
                {  12,  2621.5400,  1895.8800,    10.0500,   0.00 },
                {   9,  2629.9100,  1756.5000,    10.0500, 270.00 },
                {   9,  2452.1200,  1631.1400,    10.0500, 180.00 },
                {  12,  2365.1000,  1658.9900,    10.0500,  90.00 },
                {  12,  2396.1700,  1631.4300,    10.0500, 180.00 },
                { 493,  3006.7700,  1656.4500,     0.0000,   0.00 },
                {   5, -2416.9800,   741.7180,    34.2639, 180.39 },
                {   5, -2438.5400,   741.7180,    34.2639, 180.39 },
                {   5, -2460.1000,   741.7180,    34.2639, 180.39 },
                {   5, -2455.9500,   741.7180,    34.2639,   0.39 },
                {   5, -2504.1400,   741.7180,    34.2639,   0.39 },
                {   5, -2545.4100,   643.3510,    27.1169, 270.39 },
                {   5, -2544.9500,   586.5860,    13.9337, 270.39 },
                {   5, -2546.2700,   631.8320,    13.9337, 270.39 },
                { 416, -2631.4900,   595.8380,    20.4921, 270.00 },
                { 416, -2644.8700,   595.2430,    20.4921, 270.00 },
                { 493, -2968.2000,   497.7760,     0.2500, 180.00 },
                {   5, -2568.5300,   625.9280,    27.1169,   0.39 },
                {   5, -2552.9800,   625.9280,    27.1169, 180.39 },
                {   5, -2428.5900,   946.1300,    44.5019, 270.39 },
                {   5, -2799.3700,   775.4840,    49.8481,  45.00 },
                {   5, -2799.3100,   770.3410,    49.8481,  50.00 },
                {   5, -2799.5500,   765.7420,    49.8481,  55.00 },
                {   5, -2785.2700,   763.5090,    51.3819, 270.00 },
                {   5, -2776.3800,   763.9930,    51.3819, 245.00 },
                { 453, -3014.7200,   949.4110,     0.2500, 145.81 },
                { 484, -3004.4000,   736.9630,     0.2500, 123.08 },
                { 484, -3026.9400,  1120.4200,     0.2500,   0.00 },
                {   4, -2641.2100,   861.1150,    63.2274, 297.09 },
                {   5, -2512.9400,  1209.5000,    37.2902,  87.73 },
                {   5, -2501.9900,  1222.1600,    37.2902, 136.74 },
                {   4, -2534.9600,  1229.5200,    37.2902, 207.60 },
                {   5, -2526.7100,  1229.5200,    37.2902,  27.60 },
                {   5, -2491.6300,  1214.3800,    37.2902, 321.74 },
                { 484, -2246.3000,  1486.4300,     0.2500, 103.19 },
                { 484, -2147.4200,  1458.9600,     0.2500,   0.00 },
                { 452, -2824.2600,  1384.7300,     0.2500, 331.62 },
                { 453, -2602.2200,  2077.4300,     0.2500, 220.99 },
                { 484, -2793.2800,  1440.6300,     0.2500,  84.59 },
                { 481, -2904.3500,  1175.8900,    12.7762, 355.36 },
                {   2, -2643.8000,  1366.0500,     6.0935, 270.39 },
                {   2, -2643.8000,  1336.2000,     6.0935, 270.39 },
                {   2, -2643.8000,  1343.4800,     6.0935, 270.39 },
                { 506, -1245.5100,    48.3457,    13.1500, 315.00 },
                {  16, -1459.5900,    -5.0622,     5.2430,  89.40 },
                {  16, -1426.1000,    11.5858,     5.2430, 269.40 },
                {  16, -1385.7100,   -25.2674,     5.2430,  89.40 },
                {  16, -1337.9800,   -83.7477,     5.2430, 269.40 },
                { 472, -1176.5200,    62.6531,     0.0000,  47.00 },
                { 472, -1075.2000,  -207.6770,     0.0000,  25.50 },
                { 472, -1623.0100,   -80.0566,     0.0000, 134.50 },
                { 472, -1445.9000,    97.3042,     0.0000, 313.00 },
                { 530, -1705.2700,    11.6038,     2.5765,   0.00 },
                { 435, -1845.7500,   115.0290,    14.1499, 269.00 },
                { 435, -1845.7000,   121.5940,    14.1499, 269.00 },
                { 515, -1633.8100,   -62.3837,     2.5765, 133.00 },
                { 450, -1729.3500,   128.6880,     2.5765, 181.00 },
                { 453, -1644.2800,   252.5070,     0.0000, 268.00 },
                { 453, -1429.6000,   285.6840,     0.0000, 268.00 },
                {   0,  2104.1400,  2059.6600,    10.3157, 270.00 },
                {   0,  2104.1400,  2069.3600,    10.3157, 270.00 },
                {   0,  2104.1400,  2076.1100,    10.3157,  90.00 },
                {   0,  2103.9600,  2092.4700,    10.3157, 270.00 },
                {   0,  2103.9600,  2046.4800,    10.3157,  90.00 },
                {  12,  2119.9800,  2085.6100,    10.6075, 180.00 },
                {  12,  2119.9800,  2050.1800,    10.6075, 180.00 },
                {  12,  2119.9800,  2130.5500,    10.6075, 180.00 },
                {  12,  2119.9800,  2163.6800,    10.6075, 180.00 },
                {  12,  2119.9800,  2199.0300,    10.6075, 180.00 },
                {  12,  2119.9800,  2006.0900,    10.6075, 180.00 },
                {  12,  2154.2400,  2006.0900,    10.6075,   0.00 },
                {  12,  2154.2400,  2083.9700,    10.6075,   0.00 },
                {  12,  2154.2400,  2047.3200,    10.6075,   0.00 },
                {  12,  2154.2400,  2113.1200,    10.6075,   0.00 },
                {  12,  2154.2400,  2178.6100,    10.6075,   0.00 },
                {  12,  2154.2400,  2194.3600,    10.6075,   0.00 },
                {  12,  2119.9800,  1988.4600,    10.6075, 180.00 },
                {  12,  2119.9800,  1942.7900,    10.6075, 180.00 },
                {  12,  2119.9800,  1929.2400,    10.6075, 180.00 },
                {  12,  2119.9800,  1902.1500,    10.6075, 180.00 },
                {  12,  2119.9800,  1893.9600,    10.6075, 180.00 },
                {  12,  2107.6000,  1838.7900,    10.6075, 155.00 },
                {  12,  2087.2400,  1797.5600,    10.6075, 155.00 },
                {  12,  2136.6600,  1826.8500,    10.2944, 335.00 },
                {  12,  2121.9600,  1797.5600,    10.2944, 335.00 },
                {  12,  2154.2400,  1929.2400,    10.6075,   0.00 },
                {  12,  2154.2400,  1954.4100,    10.6075,   0.00 },
                {  12,  2154.2400,  1880.1900,    10.6075,   0.00 },
                {   5,  1537.7800,  2214.4200,    10.4224,   0.00 },
                {   5,  1531.0000,  2214.4200,    10.4224,   0.00 },
                {   5,  1541.2400,  2203.6900,    10.4224,   0.00 },
                {   5,  1496.5100,  2203.6800,    10.4224,   0.00 },
                {   5,  1730.4600,  2018.0200,    10.6626, 270.00 },
                {   5,  1730.4600,  1982.7000,    10.6626, 270.00 },
                {   5,  1730.4600,  1951.2300,    10.6626, 270.00 },
                {   5,  1744.3200,  2002.5000,    10.6626, 270.00 },
                {   5,  1744.1800,  1887.5500,    10.6626, 270.00 },
                {   4,  1434.2400,  2578.1100,    10.6075,   0.00 },
                {   4,  1274.1300,  2603.1500,    10.6075,   0.00 },
                {   4,  1279.7500,  2546.9000,    10.6075,  90.00 },
                {  -1,  1421.7000,  2867.8300,    10.6380,  90.00 },
                {  17,  1421.7000,  2830.2300,    10.6380, 270.00 },
                {   4,  1460.6100,  2839.0400,    10.6380,   0.00 },
                {  -1,  1469.4200,  2878.9800,    10.6380, 180.00 },
                {  -1,  1496.2600,  2879.0700,    10.6380,   0.00 },
                {   4,  1489.5900,  2838.9300,    10.6380, 180.00 },
                { 453,  1291.8900,  2994.3500,    -1.0000,  90.00 },
                {  11,  1535.9700,  2257.9100,    10.4224,   0.00 },
                {  11,  1532.5300,  2268.5500,    10.4224,   0.00 },
                {   4,  1396.9600,  2529.1300,    10.6075,  90.00 },
                {   4,  1367.2500,  2520.4400,    10.6075, 270.00 },
                {  11,  1515.7800,  2268.5500,    10.4224,   0.00 },
                {  11,  1499.1400,  2268.5500,    10.4224,   0.00 },
                {  11,  1518.7300,  2280.6600,    10.4224,   0.00 },
                {  11,  1525.5000,  2291.3000,    10.4224,   0.00 },
                {  11,  1492.1100,  2291.3000,    10.4224,   0.00 },
                {  11,  1385.8700,  2279.5700,    10.4224,  90.00 },
                {  11,  1385.8700,  2262.8200,    10.4224,  90.00 },
                {  11,  1385.8700,  2246.1700,    10.4224,  90.00 },
                {   4,  2011.4400,  2755.8000,    10.6075,   0.00 },
                {   4,  1919.5300,  2760.7400,    10.6075,  90.00 },
                {   4,  1928.0900,  2656.1300,    10.6075,   0.00 },
                {   4,  1978.6600,  2658.2000,    10.6075,   0.00 },
                {   4,  2044.6400,  2658.2000,    10.6075,   0.00 },
                {   4,  2059.1100,  2730.0900,    10.6075,   0.00 },
                {   4,  2009.5800,  2728.6500,    10.6075,   0.00 },
                { 453,  2121.1600,  3010.0000,    -1.0000,  90.00 },
                {   4,  1594.3500,  2746.9600,    10.6075,   0.00 },
                {   4,  1609.2500,  2719.4200,    10.6075,   0.00 },
                {   4,  1580.4400,  2838.1000,    10.6075,   0.00 },
                {   4,  1657.9600,  2719.4200,    10.6075,   0.00 },
                {   4,  1651.8900,  2746.9600,    10.6075,   0.00 },
                {   4,  1593.8900,  2807.2400,    10.6075,   0.00 },
                {   4,  1630.0600,  2807.9600,    10.6075,   0.00 },
                {   4,  1709.6100,  2700.6300,    10.6075,   0.00 },
                {   5,  1637.8200,  2576.4400,    10.6075,   0.00 },
                {   4,  1492.4100,  2540.3600,    10.6075,  90.00 },
                {   4,  1655.4000,  2835.1600,    10.6075,   0.00 },
                {   4,  1614.6000,  2835.2100,    10.6075,   0.00 },
                {  11,  1602.9700,  2362.4700,    10.2222,   0.00 },
                {  11,  1614.1800,  2362.4900,    10.2222,   0.00 },
                {   5,  1709.0400,  2308.1500,    10.2222,   0.00 },
                {   5,  1727.2000,  2353.5400,    10.2222,  90.00 },
                { 453,  1668.9100,  2994.3500,    -1.0000,  90.00 },
                {  16,  1618.1700,  1851.4800,    10.0459,   0.00 },
                {  16,  1608.4400,  1832.5300,    10.0459,   0.00 },
                {  16,  1593.6300,  1832.5300,    10.0459,   0.00 },
                {  16,  1596.0000,  1838.4700,    10.0459,   0.00 },
                {  16,  1602.2600,  1838.4700,    10.0459,   0.00 },
                {  16,  1601.2200,  1851.3300,    10.0459,   0.00 },
                {  16,  1597.0100,  1851.3300,    10.0459,   0.00 },
                {  16,  1590.5700,  1851.3300,    10.0459,   0.00 },
                { 416,  1619.6500,  1825.6000,    10.0459,   0.00 },
                { 593,  1352.1600,  1801.5700,     9.8222, 270.00 },
                {   4,  1685.9500,  1178.3300,    33.8261,   0.00 },
                {  16,  1685.8400,  1297.9400,    10.0459,   0.00 },
                { 477,  1657.0000,  1317.3300,    10.0459,   0.00 },
                {  16,  1650.5300,  1317.2100,    10.0459,   0.00 },
                {  16,  1692.1000,  1288.7300,    10.0459,   0.00 },
                {  11,  1469.0600,  1075.3600,    12.0633,   0.00 },
                {   5,  1677.7700,   988.7090,     9.8594,   0.00 },
                { 477,  1487.4800,  1017.8200,    12.0633,   0.00 },
                {  11,  1655.4300,   988.4720,     9.9862,   0.00 },
                {  11,  1668.2600,   988.4720,     9.9862, 180.00 },
                {  11,  1655.3500,   999.3630,     9.9862, 360.00 },
                {  11,  1658.5500,  1039.5500,     9.9862, 360.00 },
                {  11,  1674.6000,  1028.5000,     9.9862, 180.00 },
                {  11,  1665.0900,  1028.5000,     9.9862,   0.00 }
        }
;

new
        g_bIsMyVehicle[ ( MAX_VEHICLES + 1 ) char ],
        g_bHasGameModeExited = false
;
//=============================[Job Stuff]=============================
new MisLocations[][MisLocationsEnum] =
{
        {0, "Mission 1",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {1, "Mission 2",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {2, "Mission 3",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {3, "Mission 4",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {4, "Mission 5",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {5, "Mission 6",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {6, "Mission 7",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {7, "Mission 8",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {8, "Mission 9",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {9, "Mission 10",0.3,0.3,0.3,0.3,0.3,0.3,5000}
};
new BusLocations[][BusLocationsEnum] =
{
        {0, "Mission 1",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {1, "Mission 2",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {2, "Mission 3",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {3, "Mission 4",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {4, "Mission 5",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {5, "Mission 6",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {6, "Mission 7",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {7, "Mission 8",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {8, "Mission 9",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {9, "Mission 10",0.3,0.3,0.3,0.3,0.3,0.3,5000}
};
new TaxiLocations[][TaxiLocationsEnum] =
{
        {0, "Mission 1",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {1, "Mission 2",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {2, "Mission 3",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {3, "Mission 4",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {4, "Mission 5",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {5, "Mission 6",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {6, "Mission 7",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {7, "Mission 8",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {8, "Mission 9",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {9, "Mission 10",0.3,0.3,0.3,0.3,0.3,0.3,5000}
};
new PilotLocations[][PilotLocationsEnum] =
{
        {0, "Mission 1",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {1, "Mission 2",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {2, "Mission 3",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {3, "Mission 4",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {4, "Mission 5",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {5, "Mission 6",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {6, "Mission 7",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {7, "Mission 8",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {8, "Mission 9",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {9, "Mission 10",0.3,0.3,0.3,0.3,0.3,0.3,5000}
};
new BoatLocations[][BoatLocationsEnum] =
{
        {0, "Mission 1",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {1, "Mission 2",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {2, "Mission 3",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {3, "Mission 4",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {4, "Mission 5",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {5, "Mission 6",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {6, "Mission 7",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {7, "Mission 8",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {8, "Mission 9",0.3,0.3,0.3,0.3,0.3,0.3,5000},
        {9, "Mission 10",0.3,0.3,0.3,0.3,0.3,0.3,5000}
};
//======================[Forwards]======================
forward loadaccount_user(playerid, name[], value[]);
forward PingKick();
forward ClearSpam();
forward ClearMute();
forward update(playerid);
forward Loading(playerid);
forward UnLoading(playerid);
forward CarRespawn();
//=====================[Defines and Variables]====================
#define INI_Exists(%0) fexist(%0)
#define SCM SendClientMessage
#define SCMToAll SendClientMessageToAll
#define MAX_PING 500
#define MAX_WARNS 5
new RepeatedAttempts[MAX_PLAYERS];
new gTeam[MAX_PLAYERS];
new LastPM[MAX_PLAYERS];
new     Float:unx[MAX_PLAYERS], Float:uny[MAX_PLAYERS], Float:unz[MAX_PLAYERS], iPay[MAX_PLAYERS], MissionStatus[MAX_PLAYERS];
//=========================[Colors]=============================================
#define COLOR_WHITE           0xFFFFFFAA
#define COLOR_DBLUE           0x2641FEAA
#define COLOR_GREEN           0x00FF00FF
#define COLOR_GREY            0xAFAFAFAA
#define COLOR_RED             0xFF4646FF
#define PM_INCOMING_COLOR     0xFFFF22AA
#define PM_OUTGOING_COLOR     0xFFCC2299
main()
{
        print("\n----------------------------------");
        print(" Transportation gamemode loaded");
        print("----------------------------------\n");
}
public OnGameModeInit()
{
    SetGameModeText("Transportation");
    //trucker
        AddPlayerClass(72, -2105.3228, -124.2982, 37.2531, 0.0, 0,0,0,0,0,0);//0
        AddPlayerClass(22, -314.3864, 1537.2706, 75.7003, 0.0, 0,0,0,0,0,0);//1 
        AddPlayerClass(102, 2496.3513, -2575.1313, 14.7277, 0.0, 0,0,0,0,0,0);//2 
        AddPlayerClass(12, -2105.3228, -124.2982, 37.2531, 0.0, 0,0,0,0,0,0);//3
        //bus driver
        AddPlayerClass(4,2655.2720, 1357.8612, 6.8399,0,0,0,0,0,0,0); //4
        AddPlayerClass(3,-2056.1519,-255.7620,35.3274,0.2497,0,0,0,0,0,0); //5
        AddPlayerClass(7,-2177.2666, -2252.8743, 30.7488,0,0,0,0,0,0,0); //6
        AddPlayerClass(101,-200.5914, 2721.4619, 62.8821,0,0,0,0,0,0,0); //7
        AddPlayerClass(98,1660.6990, -1900.9613, 13.6032,0,0,0,0,0,0,0); //8
        AddPlayerClass(20,-3443.1953, 745.7473, 15.1344,0,0,0,0,0,0,0); //9
        //Taxi Driver
        AddPlayerClass(25,1932.1306, 702.6969, 9.8090,0.2497,0,0,0,0,0,0); //10
        AddPlayerClass(54,308.8941, -179.7067, 0.5721,0.2497,0,0,0,0,0,0); //11
        AddPlayerClass(58,-2073.3525, 1426.8276, 6.8755,0.2497,0,0,0,0,0,0); //12
        AddPlayerClass(69,1763.7942, -1896.0146, 12.5556,0.2497,0,0,0,0,0,0); //13
        //pilots
        AddPlayerClass(61,1326.6730, 1502.4309, 14.7109,0.2497,0,0,0,0,0,0); //14
        AddPlayerClass(111,1565.1528, -2440.5942, 14.5703,0.2497,0,0,0,0,0,0); //15
        AddPlayerClass(117,-1358.5382, -245.5559, 14.4436,0,0,0,0,0,0,0); //16
        AddPlayerClass(119,-3977.6919, 518.9759, 14.6401,0.2497,0,0,0,0,0,0); //17
        AddPlayerClass(141,377.3125, 2538.9417, 15.4844 ,0.2497,0,0,0,0,0,0); //18
        //Boat driver
        AddPlayerClass(36,2064.69995117,2227.69995117,9.80000019,0.0,0,0,0,0,0,0); // 19
        AddPlayerClass(37,2064.69995117,2227.69995117,9.80000019,0.0,0,0,0,0,0,0); // 20
        AddPlayerClass(217,2064.69995117,2227.69995117,9.80000019,0.0,0,0,0,0,0,0); // 21

    SetTimer("CarRespawn", 3000, false);
        SetTimer("PingKick", 2000, true);
        SetTimer("ClearSpam", 5000, true);
    SetTimer("ClearMute", 180000, true);
    
    
        if ( g_bHasGameModeExited )
        {
                g_bHasGameModeExited = false;

                for ( new i = 0, iModel, iVehicle; i < sizeof( g_Vehicles ); i++ )
                {
                        iModel = g_Vehicles[ i ][ e_iModel ] >= 400 ? g_Vehicles[ i ][ e_iModel ] : GetRandomModelByGroup( g_Vehicles[ i ][ e_iModel ] );

                        iVehicle = CreateVehicle( iModel, g_Vehicles[ i ][ e_fX ], g_Vehicles[ i ][ e_fY ], g_Vehicles[ i ][ e_fZ ], g_Vehicles[ i ][ e_fRot ], -1, -1, 800 );

                        if ( iVehicle )
                        g_bIsMyVehicle{ iVehicle } = true;
                }
        }
        return 1;
}
public OnGameModeExit()
{
    g_bHasGameModeExited = true;
    for ( new iVehicle = 1; iVehicle < MAX_VEHICLES + 1; iVehicle++ )
        {
                if ( g_bIsMyVehicle{ iVehicle } )
                        DestroyVehicle( iVehicle );
        }
        return 1;
}
public OnPlayerRequestClass(playerid,classid)
{
        SetPlayerTeamFromClass(playerid, classid);
        InterpolateCameraPos(playerid,1452.445556,-814.403869,88.533508,1415.500000,-813.963256,90.274688,2222);
        InterpolateCameraLookAt(playerid,1449.309692,-817.947631,86.918464,1415.342529,-809.165588,91.673728,2222);
        SetPlayerPos(playerid,1415.590576,-808.479675,91.853370);
        SetPlayerFacingAngle(playerid,184.728164);
        switch (classid)
        {
                case 0,1,2,3: // Classes that will be truckdrivers
                {
                        // Display the name of the class
            GameTextForPlayer(playerid,"~g~Trucker Class",8000,4);
                }
                case 4,5,6,7,8,9: // Classes that will be Boat-drivers
                {
                        // Display the name of the class
            GameTextForPlayer(playerid,"~y~Bus Driver",8000,4);
                }
                case 10,11,12,13:
                {
                    GameTextForPlayer(playerid, "~r~Taxi Driver", 8000, 4);
                }
                case 14,15,16,17,18:
                {
                    GameTextForPlayer(playerid, "~p~Pilot", 8000, 4);
                }
                case 19,20,21:
                {
                    GameTextForPlayer(playerid, "~b~Skipper", 8000, 4);
                }
        }
        return 1;
}
public OnPlayerConnect(playerid)
{
        new name[MAX_PLAYER_NAME + 1];
        GetPlayerName(playerid, name, sizeof(name));
        if(INI_Exists(Path(playerid)))
        {
            INI_ParseFile(Path(playerid), "loadaccount_%s", .bExtra = true, .extra = playerid);
            ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login", "This account is already registered. Please enter your password to login", "Login", "Kick");
        }
        else
        {
            ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Register", "This account is not registered. Please enter your password to register an account", "Register", "Kick");
            return 1;
        }
        BanBox[playerid] = CreatePlayerTextDraw(playerid, 481.199981, 162.033325, "usebox");
        PlayerTextDrawLetterSize(playerid, BanBox[playerid], 0.000000, 13.372223);
        PlayerTextDrawTextSize(playerid, BanBox[playerid], 160.399993, 0.000000);
        PlayerTextDrawAlignment(playerid, BanBox[playerid], 1);
        PlayerTextDrawColor(playerid, BanBox[playerid], 0);
        PlayerTextDrawUseBox(playerid, BanBox[playerid], true);
        PlayerTextDrawBoxColor(playerid, BanBox[playerid], 102);
        PlayerTextDrawSetShadow(playerid, BanBox[playerid], 0);
        PlayerTextDrawSetOutline(playerid, BanBox[playerid], 0);
        PlayerTextDrawFont(playerid, BanBox[playerid], 0);

        BanInfo[playerid] = CreatePlayerTextDraw(playerid, 165.600067, 165.013244, "You Have been banned from this server");
        PlayerTextDrawLetterSize(playerid, BanInfo[playerid], 0.333999, 1.614933);
        PlayerTextDrawAlignment(playerid, BanInfo[playerid], 1);
        PlayerTextDrawColor(playerid, BanInfo[playerid], -16776961);
        PlayerTextDrawSetShadow(playerid, BanInfo[playerid], 0);
        PlayerTextDrawSetOutline(playerid, BanInfo[playerid], 1);
        PlayerTextDrawBackgroundColor(playerid, BanInfo[playerid], 51);
        PlayerTextDrawFont(playerid, BanInfo[playerid], 2);
        PlayerTextDrawSetProportional(playerid, BanInfo[playerid], 1);

        BanReason[playerid] = CreatePlayerTextDraw(playerid, 227.199996, 193.386657, "Reason : LOLOLOLOLOL");
        PlayerTextDrawLetterSize(playerid, BanReason[playerid], 0.389999, 1.600000);
        PlayerTextDrawAlignment(playerid, BanReason[playerid], 1);
        PlayerTextDrawColor(playerid, BanReason[playerid], -16776961);
        PlayerTextDrawSetShadow(playerid, BanReason[playerid], 0);
        PlayerTextDrawSetOutline(playerid, BanReason[playerid], 1);
        PlayerTextDrawBackgroundColor(playerid, BanReason[playerid], 51);
        PlayerTextDrawFont(playerid, BanReason[playerid], 2);
        PlayerTextDrawSetProportional(playerid, BanReason[playerid], 1);

        BanBy[playerid] = CreatePlayerTextDraw(playerid, 227.199966, 217.279998, "Banned By : MAX_PLAYER_NAME");
        PlayerTextDrawLetterSize(playerid, BanBy[playerid], 0.348399, 1.607466);
        PlayerTextDrawAlignment(playerid, BanBy[playerid], 1);
        PlayerTextDrawColor(playerid, BanBy[playerid], -16776961);
        PlayerTextDrawSetShadow(playerid, BanBy[playerid], 0);
        PlayerTextDrawSetOutline(playerid, BanBy[playerid], 1);
        PlayerTextDrawBackgroundColor(playerid, BanBy[playerid], 51);
        PlayerTextDrawFont(playerid, BanBy[playerid], 2);
        PlayerTextDrawSetProportional(playerid, BanBy[playerid], 1);

        Msg1[playerid] = CreatePlayerTextDraw(playerid, 169.599975, 245.653320, "If you think this is an error press F8 to take a screenshot");
        PlayerTextDrawLetterSize(playerid, Msg1[playerid], 0.216399, 1.525333);
        PlayerTextDrawAlignment(playerid, Msg1[playerid], 1);
        PlayerTextDrawColor(playerid, Msg1[playerid], 8388863);
        PlayerTextDrawSetShadow(playerid, Msg1[playerid], 0);
        PlayerTextDrawSetOutline(playerid, Msg1[playerid], 1);
        PlayerTextDrawBackgroundColor(playerid, Msg1[playerid], 51);
        PlayerTextDrawFont(playerid, Msg1[playerid], 2);
        PlayerTextDrawSetProportional(playerid, Msg1[playerid], 1);

        Msg2[playerid] = CreatePlayerTextDraw(playerid, 226.399917, 262.826599, "and post it on our forums");
        PlayerTextDrawLetterSize(playerid, Msg2[playerid], 0.298799, 1.473066);
        PlayerTextDrawAlignment(playerid, Msg2[playerid], 1);
        PlayerTextDrawColor(playerid, Msg2[playerid], 8388863);
        PlayerTextDrawSetShadow(playerid, Msg2[playerid], 0);
        PlayerTextDrawSetOutline(playerid, Msg2[playerid], 1);
        PlayerTextDrawBackgroundColor(playerid, Msg2[playerid], 51);
        PlayerTextDrawFont(playerid, Msg2[playerid], 2);
        PlayerTextDrawSetProportional(playerid, Msg2[playerid], 1);

        InfoBox[playerid] = CreatePlayerTextDraw(playerid, 2.000000, 433.073333, "usebox");
        PlayerTextDrawLetterSize(playerid, InfoBox[playerid], 0.000000, 1.425554);
        PlayerTextDrawTextSize(playerid, InfoBox[playerid], 637.199951, 0.000000);
        PlayerTextDrawAlignment(playerid, InfoBox[playerid], 1);
        PlayerTextDrawColor(playerid, InfoBox[playerid], 0);
        PlayerTextDrawUseBox(playerid, InfoBox[playerid], true);
        PlayerTextDrawBoxColor(playerid, InfoBox[playerid], 102);
        PlayerTextDrawSetShadow(playerid, InfoBox[playerid], 0);
        PlayerTextDrawSetOutline(playerid, InfoBox[playerid], 0);
        PlayerTextDrawFont(playerid, InfoBox[playerid], 0);

        InfoName[playerid] = CreatePlayerTextDraw(playerid, -0.000000, 430.079925, "Name : MAX_PLAYER_NAME      Admin level : 0   VIP Level : 0  Score : 10000");
        PlayerTextDrawLetterSize(playerid, InfoName[playerid], 0.449999, 1.600000);
        PlayerTextDrawAlignment(playerid, InfoName[playerid], 1);
        PlayerTextDrawColor(playerid, InfoName[playerid], -1);
        PlayerTextDrawSetShadow(playerid, InfoName[playerid], 0);
        PlayerTextDrawSetOutline(playerid, InfoName[playerid], 1);
        PlayerTextDrawBackgroundColor(playerid, InfoName[playerid], 51);
        PlayerTextDrawFont(playerid, InfoName[playerid], 1);
        PlayerTextDrawSetProportional(playerid, InfoName[playerid], 1);


        SpecBox[playerid] = CreatePlayerTextDraw(playerid, 642.000000, 312.859985, "usebox");
        PlayerTextDrawLetterSize(playerid, SpecBox[playerid], 0.000000, 8.527778);
        PlayerTextDrawTextSize(playerid, SpecBox[playerid], 454.800048, 0.000000);
        PlayerTextDrawAlignment(playerid, SpecBox[playerid], 1);
        PlayerTextDrawColor(playerid, SpecBox[playerid], 0);
        PlayerTextDrawUseBox(playerid, SpecBox[playerid], true);
        PlayerTextDrawBoxColor(playerid, SpecBox[playerid], 102);
        PlayerTextDrawSetShadow(playerid, SpecBox[playerid], 0);
        PlayerTextDrawSetOutline(playerid, SpecBox[playerid], 0);
        PlayerTextDrawFont(playerid, SpecBox[playerid], 0);

        SpecON[playerid] = CreatePlayerTextDraw(playerid, 459.999938, 315.093200, "Spectating Mode : ON");
        PlayerTextDrawLetterSize(playerid, SpecON[playerid], 0.449999, 1.600000);
        PlayerTextDrawAlignment(playerid, SpecON[playerid], 1);
        PlayerTextDrawColor(playerid, SpecON[playerid], 8388863);
        PlayerTextDrawSetShadow(playerid, SpecON[playerid], 0);
        PlayerTextDrawSetOutline(playerid, SpecON[playerid], 1);
        PlayerTextDrawBackgroundColor(playerid, SpecON[playerid], 51);
        PlayerTextDrawFont(playerid, SpecON[playerid], 1);
        PlayerTextDrawSetProportional(playerid, SpecON[playerid], 1);

        SpecName[playerid] = CreatePlayerTextDraw(playerid, 482.399993, 340.479949, "MAX_PLAYER_NAME");
        PlayerTextDrawLetterSize(playerid, SpecName[playerid], 0.405200, 1.547732);
        PlayerTextDrawAlignment(playerid, SpecName[playerid], 1);
        PlayerTextDrawColor(playerid, SpecName[playerid], -16776961);
        PlayerTextDrawSetShadow(playerid, SpecName[playerid], 0);
        PlayerTextDrawSetOutline(playerid, SpecName[playerid], 1);
        PlayerTextDrawBackgroundColor(playerid, SpecName[playerid], 51);
        PlayerTextDrawFont(playerid, SpecName[playerid], 1);
        PlayerTextDrawSetProportional(playerid, SpecName[playerid], 1);

        SpecVeh[playerid] = CreatePlayerTextDraw(playerid, 464.800140, 360.639984, "Vehicle : FiretruckLA");
        PlayerTextDrawLetterSize(playerid, SpecVeh[playerid], 0.449999, 1.600000);
        PlayerTextDrawAlignment(playerid, SpecVeh[playerid], 1);
        PlayerTextDrawColor(playerid, SpecVeh[playerid], -16776961);
        PlayerTextDrawSetShadow(playerid, SpecVeh[playerid], 0);
        PlayerTextDrawSetOutline(playerid, SpecVeh[playerid], 1);
        PlayerTextDrawBackgroundColor(playerid, SpecVeh[playerid], 51);
        PlayerTextDrawFont(playerid, SpecVeh[playerid], 1);
        PlayerTextDrawSetProportional(playerid, SpecVeh[playerid], 1);
        
        WorkText = TextDrawCreate(5.000000, 425.000000, "~r~Currently Your Doing ~p~____ Job~w~ Go to the Red Checkpoint.");
        TextDrawBackgroundColor(WorkText, 255);
        TextDrawFont(WorkText, 2);
        TextDrawLetterSize(WorkText, 0.329999, 2.100001);
        TextDrawColor(WorkText, -1);
        TextDrawSetOutline(WorkText, 0);
        TextDrawSetProportional(WorkText, 1);
        TextDrawSetShadow(WorkText, 1);
        
        MissionStatus[playerid] = 0;
        return 1;
}

public OnPlayerDisconnect(playerid, reason)
{

    if(INI_Exists(Path(playerid)))
    {
        new INI:file = INI_Open(Path(playerid));
        INI_WriteInt(file, "AdminLevel",pInfo[playerid][pAdmin]);
        INI_WriteInt(file, "VIPLevel",pInfo[playerid][pVIP]);
        INI_WriteInt(file, "Money",GetPlayerMoney(playerid));
        INI_WriteInt(file, "Score",GetPlayerScore(playerid));
                INI_WriteInt(file, "Muted", pInfo[playerid][pMute]);
                INI_WriteInt(file, "Frozen", pInfo[playerid][pFrozen]);
                INI_WriteInt(file, "Warnings", pInfo[playerid][pWarns]);
                INI_WriteInt(file, "Duty", pInfo[playerid][pDuty]);
                INI_WriteInt(file, "NoPM", pInfo[playerid][pNoPM]);
                INI_WriteInt(file, "Answers", pInfo[playerid][pAnswers]);
        INI_Close(file);
        return 1;
    }
        MissionStatus[playerid] = 0;
    return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
        MissionStatus[playerid] = 0;
        return 1;
}
public OnPlayerText(playerid, text[])
{
        if(pInfo[playerid][pMute] == 1)
        {
            SCM(playerid, COLOR_RED, "[SERVER MUTE]You are muted, no one can hear you");
            return 0;
        }
        pInfo[playerid][pSpam] += 1;
        if(pInfo[playerid][pSpam] == 5)
        {
            new string[100];
            format(string, sizeof(string), "[SERVER MUTE] You have been muted for spamming");
                SCM(playerid, COLOR_RED, string);
                pInfo[playerid][pMute] = 1;
                return 0;
        }
        if(pInfo[playerid][pSpam] == 4)
        {
            SCM(playerid, COLOR_RED, "[SERVER]Stop with spam or you will be muted");
            return 0;
        }
        return 1;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
        switch(dialogid)
        {
            case DIALOG_REGISTER:
            {
                if(!response) return Kick(playerid);
                if(response)
                        {
                                if(!strlen(inputtext))
                                {
                                    ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Register", "Please enter your password to register", "Register", "Quit");
                                    return 1;
                                }
                                new hash[129];
                                WP_Hash(hash, sizeof(hash), inputtext);
                                new INI:file = INI_Open(Path(playerid));
                                INI_WriteString(file, "Password", hash);
                                INI_WriteInt(file, "AdminLevel", 0);
                                INI_WriteInt(file, "VIPLevel", 0);
                                INI_WriteInt(file, "Money", 0);
                                INI_WriteInt(file, "Score", 0);
                                INI_WriteInt(file, "Muted", 0);
                                INI_WriteInt(file, "Frozen", 0);
                                INI_WriteInt(file, "Warnings", 0);
                                INI_WriteInt(file, "Duty", 0);
                                INI_WriteInt(file, "NoPM", 0);
                                INI_WriteInt(file, "Answers", 0);
                                INI_Close(file);
                                RepeatedAttempts[playerid] = 0;
                                ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, "Rules", "No Hacking\nNo Deathmatching\nNo Abusing\nNo Spamming\nNo Harassing Players\nAlways Drive on the Left\nNo Driving Cars on Runways\nNo Selling IG cash outside the server\nNever ask to be Admin\nFor the full list please visit www.samptransport.com", "Next", "");
                                return 1;
                        }
                }
                case DIALOG_LOGIN:
                {
                    if(!response) return Kick(playerid);
                    if(response)
                    {
                        new hash[129];
                        WP_Hash(hash, sizeof(hash), inputtext);
                                if(!strcmp(hash, pInfo[playerid][pPass]))
                                {
                                    INI_ParseFile(Path(playerid), "loadaccount_%s", .bExtra = true, .extra = playerid);
                                    SetPlayerScore(playerid, pInfo[playerid][pScore]);
                                    GivePlayerMoney(playerid, pInfo[playerid][pMoney]);
                                        if(pInfo[playerid][pWarns] >= MAX_WARNS)
                                        {
                                                new string[100];
                                                format(string, sizeof(string), "[SERVER KICK]You have exceeded the warn limit. The maximum warn limit is %d", MAX_WARNS);
                                                SCM(playerid, COLOR_RED, string);
                                                Kick(playerid);
                                        }
                                        if(pInfo[playerid][pAnswers] < 5) return ShowPlayerDialog(playerid, DIALOG_QUESTION1, DIALOG_STYLE_LIST, "Question 1/5", "Wrong\nWrong\nCorrect\nWrong", "Okay", "Cancel");
                                }
                                else
                                {
                                    if(RepeatedAttempts[playerid] >= 3)
                                    {
                                        Kick(playerid);
                                                return 1;
                                        }
                                        else
                                        {
                                            ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login", "This account is already registered. Please enter your password to login\n Please enter the correct password\nRepeated Attempts will get you kicked", "Login", "Kick");
                                                RepeatedAttempts[playerid]++;
                                        }
                                }
                        }
                }
                case DIALOG_RULES:
                {
                    if(response)
                    {
                        ShowPlayerDialog(playerid, DIALOG_QUESTION1, DIALOG_STYLE_LIST, "Question 1/5", "Wrong\nWrong\nCorrect\nWrong", "Okay", "Cancel");
                        return 1;
                        }
                }
                case DIALOG_QUESTION1:
                {
                    if(!response) return Kick(playerid);
                    if(response)
                    {
                                if(listitem == 0)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 1)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 2)
                                {
                                    SCM(playerid, COLOR_GREEN, "Correct, let us move on");
                                        ShowPlayerDialog(playerid, DIALOG_QUESTION2, DIALOG_STYLE_LIST, "Question 2/5", "Wrong\nCorrect\nWrong\nWrong", "Okay", "Cancel");
                                        pInfo[playerid][pAnswers]++;
                                }
                                if(listitem == 3)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                        }
                }
                case DIALOG_QUESTION2:
                {
                    if(!response) return Kick(playerid);
                    if(response)
                    {
                                if(listitem == 0)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 1)
                                {
                                    SCM(playerid, COLOR_GREEN, "Correct, let us move on");
                                        ShowPlayerDialog(playerid, DIALOG_QUESTION3, DIALOG_STYLE_LIST, "Question 3/5", "Wrong\nWrong\nWrong\nCorrect", "Okay", "Cancel");
                                        pInfo[playerid][pAnswers]++;
                                }
                                if(listitem == 2)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 3)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                        }
                }
                case DIALOG_QUESTION3:
                {
                    if(!response) return Kick(playerid);
                    if(response)
                    {
                                if(listitem == 0)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 1)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 2)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 3)
                                {
                                    SCM(playerid, COLOR_GREEN, "Correct, let us move on");
                                        ShowPlayerDialog(playerid, DIALOG_QUESTION4, DIALOG_STYLE_LIST, "Question 4/5", "Wrong\nWrong\nWrong\nCorrect", "Okay", "Cancel");
                                        pInfo[playerid][pAnswers]++;
                                }
                        }
                }
                case DIALOG_QUESTION4:
                {
                    if(!response) return Kick(playerid);
                    if(response)
                    {
                                if(listitem == 0)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 1)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 2)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 3)
                                {
                                    SCM(playerid, COLOR_GREEN, "Correct, let us move on");
                                        ShowPlayerDialog(playerid, DIALOG_QUESTION5, DIALOG_STYLE_LIST, "Question 5/5", "Wrong\nWrong\nWrong\nCorrect", "Okay", "Cancel");
                                        pInfo[playerid][pAnswers]++;
                                }
                        }
                }
                case DIALOG_QUESTION5:
                {
                    if(!response) return Kick(playerid);
                    if(response)
                    {
                                if(listitem == 0)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 1)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 2)
                                {
                                    SCM(playerid, COLOR_RED, "Wrong Answer.");
                                    Kick(playerid);
                                }
                                if(listitem == 3)
                                {
                                    SCM(playerid, COLOR_GREEN, "Congratulations! You have passed the test. You may continue");
                                        pInfo[playerid][pAnswers]++;
                                }
                        }
                }
        }
        return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
        if(MissionStatus[playerid] == 1)
        {
            GameTextForPlayer(playerid, "~y~Loading~n~~g~Please Wait", 2000, 1);
            TogglePlayerControllable(playerid, 0);
            SetTimerEx("Loading", 10000, false, "i", playerid);
        }
        else if(MissionStatus[playerid] == 2)
        {
            GameTextForPlayer(playerid, "~y~UnLoading~n~~g~Please Wait", 2000, 1);
            TogglePlayerControllable(playerid,0);
                SetTimerEx("UnLoading", 10000, false, "i", playerid);
        }
        return 1;
}
public OnPlayerSpawn(playerid)
{
        SetPlayerToTeamColor(playerid);
        SetTimerEx("update", 1000, true, "i", playerid);
        PlayerTextDrawShow(playerid, InfoName[playerid]);
        PlayerTextDrawShow(playerid, InfoBox[playerid]);
        SetPlayerInterior(playerid, 0);
        return 1;
}
//===========================[Player Commands]======================================
CMD:admins(playerid, params[])
{
        new string[128];
        SCM(playerid, -1, "");
        SCM(playerid, COLOR_GREEN, "-------------------------ONLINE ADMINS-------------------------");
        SCM(playerid, -1, "");
        for(new i=0;i<MAX_PLAYERS;i++)
        {
            if(IsPlayerConnected(i))
            {
                if(pInfo[i][pAdmin] > 0)
                        {
                            new name[MAX_PLAYER_NAME];
                            GetPlayerName(i, name, sizeof(name));
                            format(string, sizeof(string), "Name : %s  Level : %d", name, pInfo[i][pAdmin]);
                            SCM(playerid, COLOR_GREEN, string);
                        }
                }
        }
        return 1;
}
CMD:report(playerid, params[])
{
        new report[64], string[100], giveplayerid;
        if(sscanf(params, "is[64]", giveplayerid, report)) return SCM(playerid, COLOR_RED, "[USAGE] /report <playerid> <reason>");
        format(string, sizeof(string), "[REPORT] Against ID %d   Reason : %s", giveplayerid, report);
        SendMessageToAdmins(COLOR_DBLUE, string);
        return 1;
}
CMD:togpm(playerid, params[])
{
        if(pInfo[playerid][pNoPM] == 0)
        {
            pInfo[playerid][pNoPM] = 1;
            SCM(playerid, COLOR_GREEN, "[SERVER]You are no longer accepting private messages");
        }
        else
        {
            pInfo[playerid][pNoPM] = 0;
            SCM(playerid, COLOR_GREEN, "[SERVER]You are now accepting private messages");
        }
        return 1;
}
CMD:pm(playerid, params[])
{
    new pID, text[128], string[128];
    if(sscanf(params, "us", pID, text)) return SCM(playerid, COLOR_RED, "[USAGE] /pm <playerid/part of name> <message>");
    if(!IsPlayerConnected(pID)) return SCM(playerid, COLOR_RED, "Player is not connected.");
    if(pID == playerid) return SCM(playerid, COLOR_RED, "You cannot PM yourself.");
    format(string, sizeof(string), "%s (%d) is not accepting private messages at the moment.", GetName(pID), pID);
    if(pInfo[pID][pNoPM] == 1) return SCM(playerid, COLOR_RED, string);
    format(string, sizeof(string), "PM to %s: %s", GetName(pID), text);
    SCM(playerid, PM_OUTGOING_COLOR, string);
    format(string, sizeof(string), "PM from %s: %s", GetName(playerid), text);
    SCM(pID, PM_INCOMING_COLOR, string);
    LastPM[pID] = playerid;
    return 1;
}
CMD:r(playerid, params[])
{
    new text[128], string[128];
    if(sscanf(params, "s", text)) return SCM(playerid, COLOR_RED, "[USAGE] /r <message>");
    new pID = LastPM[playerid];
    if(!IsPlayerConnected(pID)) return SCM(playerid, COLOR_RED, "Player is not connected.");
    if(pID == playerid) return SCM(playerid, COLOR_RED, "You cannot PM yourself.");
    format(string, sizeof(string), "%s (%d) is not accepting private messages at the moment.", GetName(pID), pID);
    if(pInfo[pID][pNoPM] == 1) return SCM(playerid, COLOR_RED, string);
    format(string, sizeof(string), "PM to %s: %s", GetName(pID), text);
    SCM(playerid, PM_OUTGOING_COLOR, string);
    format(string, sizeof(string), "PM from %s: %s", GetName(playerid), text);
    SCM(pID, PM_INCOMING_COLOR, string);
    LastPM[pID] = playerid;
    return 1;
}
CMD:ask(playerid, params[])
{
        new string[128], text[64];
        if(sscanf(params, "s[64]", text)) return SCM(playerid, COLOR_RED, "[USAGE] /ask <question>");
        format(string, sizeof(string), "[QUESTION] By %s | %s", GetName(playerid), text);
        SendMessageToAdmins(COLOR_GREEN, string);
        return 1;
}
CMD:startwork(playerid, params[])
{
        if(MissionStatus[playerid] == 0)
        {
            SCM(playerid, -1, "hello");
            if(gTeam[playerid] == TEAM_TRUCKER)
            {
                new vID = GetPlayerVehicleID(playerid);
                        if(GetVehicleModel(vID)== 403 || GetVehicleModel(vID)== 515 || GetVehicleModel(vID) == 514)
                        {
                        if(IsTrailerAttachedToVehicle(vID))
                        {
                                MissionStatus[playerid] = 1;
                                        new MisRand = random(sizeof(MisLocations));
                                        new LoadText[128], Float:x, Float:y, Float:z;
                                        new string[128];
                                        x = MisLocations[MisRand][LoadX];
                                        y = MisLocations[MisRand][LoadY];
                                        z = MisLocations[MisRand][LoadZ];
                                        unx[playerid] = MisLocations[MisRand][UnloadX];
                                        uny[playerid] = MisLocations[MisRand][UnloadY];
                                        unz[playerid] = MisLocations[MisRand][UnloadZ];
                                        iPay[playerid] = MisLocations[MisRand][Pay];
                                        SetPlayerCheckpoint(playerid, x, y, z, 7);
                                        format(string, sizeof(string), "~r~Currently Your Doing ~p~Trucker Job~w~ Go to the Red Checkpoint.");
                                        TextDrawSetString(WorkText, string);
                                        TextDrawShowForPlayer(playerid, WorkText);
                                        format(LoadText, 128, "%s",MisLocations[MisRand][LoadName]);
                                        SCM(playerid, COLOR_GREEN, "Mission:");
                                        SCM(playerid, 0xFFFFFFFF, LoadText);
                                        SCM(playerid, COLOR_GREEN, "You are now doing the Trucker job. Go to the Red Checkpoint");
                                }
                                else
                                {
                                        SCM(playerid, COLOR_RED, "You need a trailer!");
                                }
                        }
                        else
                        {
                                SCM(playerid, COLOR_RED, "You must be in a Truck to perform this!");
                        }
                }
                else if(gTeam[playerid] == TEAM_BUSDRIVER)
                {
                    SCM(playerid, -1, "bus");
                        new vID = GetPlayerVehicleID(playerid);
                        if(GetVehicleModel(vID)== 437 || GetVehicleModel(vID)== 431)
                        {
                SCM(playerid, -1, "bus");
                        MissionStatus[playerid] = 1;
                        SCM(playerid, -1, "bus");
                        new BusRand = random(sizeof(BusLocations));
                                new LoadText[128], Float:x, Float:y, Float:z;
                                new string[128];
                                SCM(playerid, -1, "bus");
                                x = BusLocations[BusRand][LoadX];
                                y = BusLocations[BusRand][LoadY];
                                z = BusLocations[BusRand][LoadZ];
                                unx[playerid] = BusLocations[BusRand][UnloadX];
                                uny[playerid] = BusLocations[BusRand][UnloadY];
                                unz[playerid] = BusLocations[BusRand][UnloadZ];
                                iPay[playerid] = BusLocations[BusRand][Pay];
                                SCM(playerid, -1, "bus");
                                format(string, sizeof(string), "~r~Currently Your Doing ~p~Bus Driver Job~w~ Go to the Red Checkpoint.");
                                TextDrawSetString(WorkText, string);
                                TextDrawShowForPlayer(playerid, WorkText);
                                SetPlayerCheckpoint(playerid, x, y, z, 7);
                                format(LoadText, 128, "%s",BusLocations[BusRand][LoadName]);
                                SCM(playerid, COLOR_GREEN, "Mission:");
                                SCM(playerid, 0xFFFFFFFF, LoadText);
                                SCM(playerid, COLOR_GREEN, "You are now doing the Bus Driver job. Go to the Red Checkpoint");
                SCM(playerid, -1, "bus");
                        }
                        else
                        {
                        SCM(playerid, COLOR_RED, "You must be in a Bus to perform this!");
                        }
                }
                else if(gTeam[playerid] == TEAM_TAXIDRIVER)
                {
                    new vID = GetPlayerVehicleID(playerid);
                        if(GetVehicleModel(vID)== 420)
                        {
                                MissionStatus[playerid] = 1;
                                new string[128];
                        new TaxiRand = random(sizeof(TaxiLocations));
                                new LoadText[128], Float:x, Float:y, Float:z;
                                x = TaxiLocations[TaxiRand][LoadX];
                                y = TaxiLocations[TaxiRand][LoadY];
                                z = TaxiLocations[TaxiRand][LoadZ];
                                unx[playerid] = TaxiLocations[TaxiRand][UnloadX];
                                uny[playerid] = TaxiLocations[TaxiRand][UnloadY];
                                unz[playerid] = TaxiLocations[TaxiRand][UnloadZ];
                                iPay[playerid] = TaxiLocations[TaxiRand][Pay];
                                SetPlayerCheckpoint(playerid, x, y, z, 7);
                                format(string, 128, "~r~Currently Your Doing ~p~Taxi Driver Job~w~ Go to the Red Checkpoint.");
                                TextDrawSetString(WorkText, string);
                                TextDrawShowForPlayer(playerid, WorkText);
                                format(LoadText, 128, "%s",TaxiLocations[TaxiRand][LoadName]);
                                SCM(playerid, COLOR_GREEN, "Mission:");
                                SCM(playerid, 0xFFFFFFFF, LoadText);
                                SCM(playerid, COLOR_GREEN, "You are now doing the Taxi job. Go to the Red Checkpoint");
                        }
                        else
                        {
                         SCM(playerid, COLOR_RED, "You must be in a Taxi to perform this!");
                        }
                }
                else if(gTeam[playerid] == TEAM_PILOT)
                {
                    new vID = GetPlayerVehicleID(playerid);
                        if(GetVehicleModel(vID)== 519 || GetVehicleModel(vID)== 553)
                        {
                                MissionStatus[playerid] = 1;
                                new PilotRand = random(sizeof(PilotLocations));
                                new LoadText[128], Float:x, Float:y, Float:z;
                                new string[128];
                                x = PilotLocations[PilotRand][LoadX];
                                y = PilotLocations[PilotRand][LoadY];
                                z = PilotLocations[PilotRand][LoadZ];
                                unx[playerid] = PilotLocations[PilotRand][UnloadX];
                                uny[playerid] = PilotLocations[PilotRand][UnloadY];
                                unz[playerid] = PilotLocations[PilotRand][UnloadZ];
                                iPay[playerid] = PilotLocations[PilotRand][Pay];
                                SetPlayerCheckpoint(playerid, x, y, z, 7);
                                format(string, 128, "~r~Currently Your Doing ~p~Pilot Job~w~ Go to the Red Checkpoint.");
                                format(LoadText, 128, "%s",PilotLocations[PilotRand][LoadName]);
                                SCM(playerid, COLOR_GREEN, "Mission:");
                                SCM(playerid, 0xFFFFFFFF, LoadText);
                                SCM(playerid, COLOR_GREEN, "You are now doing the Pilot Job. Go to the Red Checkpoint");
                                TextDrawSetString(WorkText, string);
                                TextDrawShowForPlayer(playerid, WorkText);
                        }
                        else
                        {
                                SCM(playerid, COLOR_RED, "You must be in a Shamal Or Nevada to perform this!");
                        }
                }
                else if(gTeam[playerid] == TEAM_BOATDRIVER)
                {
                    new vID = GetPlayerVehicleID(playerid);
                        new string[128];
                        if(GetVehicleModel(vID) == 473 || GetVehicleModel(vID) == 493)
                        {
                        MissionStatus[playerid] = 1;
                        new SkipRand = random(sizeof(BoatLocations));
                        new LoadText[128], Float:x, Float:y, Float:z;
                        x = BoatLocations[SkipRand][LoadX];
                        y = BoatLocations[SkipRand][LoadY];
                        z = BoatLocations[SkipRand][LoadZ];
                        unx[playerid] = BoatLocations[SkipRand][UnloadX];
                        uny[playerid] = BoatLocations[SkipRand][UnloadY];
                        unz[playerid] = BoatLocations[SkipRand][UnloadZ];
                        iPay[playerid] = BoatLocations[SkipRand][Pay];
                                SetPlayerCheckpoint(playerid, x, y, z, 7);
                                format(LoadText, 128, "%s", BoatLocations[SkipRand][LoadName]);
                        format(string, 128, "~r~Currently Your Doing ~p~Skipper Job~w~ Go to the Red Checkpoint.");
                                TextDrawSetString(WorkText, string);
                                TextDrawShowForPlayer(playerid, WorkText);
                        SCM(playerid, COLOR_GREEN, "Mission:");
                        SCM(playerid, 0xFFFFFFFF, LoadText);
                        SCM(playerid, COLOR_GREEN, "You are now doing the Skipper Job. Go to the Red Checkpoint");
                        }
                        else
                        {
                        SCM(playerid, COLOR_RED, "You must be in a Dinghy Or Jetmax to perform this");
                        }
                }
        }
        else
        {
            SCM(playerid, COLOR_RED, "You are already on a mission. Use /stopwork if you want to quit the mission");
        }
        return 1;
}
CMD:stopwork(playerid, params[])
{
        if(MissionStatus[playerid] == 1)
        {
        TextDrawHideForPlayer(playerid, WorkText);
                DisablePlayerCheckpoint(playerid);
                SCM(playerid, COLOR_RED, "You chose to cancel the mission and got fined $1000");
                GivePlayerMoney(playerid, -1000);
                MissionStatus[playerid] = 0;
        }
        else
        {
            SCM(playerid, COLOR_RED, "You are not doing any job. Type /work to start a job");
        }
        return 1;
}
//================================[Admin Commands]=================================
CMD:duty(playerid, params[])
{
        if(pInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        new string[128];
        if(pInfo[playerid][pDuty] == 0)
        {
            format(string, sizeof(string), "[SERVER] Admin %s is now on duty", GetName(playerid));
            SCMToAll(COLOR_GREY, string);
            SetPlayerHealth(playerid, 10000);
            SetPlayerArmour(playerid, 10000);
        }
        else
        {
            format(string, sizeof(string), "[SERVER] Admin %s is now off duty", GetName(playerid));
            SCMToAll(COLOR_GREY, string);
            SetPlayerHealth(playerid, 100);
            SetPlayerArmour(playerid, 100);
        }
        return 1;
}
CMD:ban(playerid, params[])
{
        new targetid, reason[64], string[128], string2[MAX_PLAYER_NAME];
        if(pInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "us[64]", targetid, reason)) return SCM(playerid, COLOR_RED, "[USAGE] /ban <playerid/part of name> <reason>");
        if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
        format(string, sizeof(string), "Reason : %s", reason);
        format(string2, sizeof(string), "Banned By : %s", GetName(playerid));
        PlayerTextDrawSetString(targetid, BanReason[targetid], string);
        PlayerTextDrawSetString(targetid, BanBy[targetid], string2);
        PlayerTextDrawShow(targetid, BanBox[targetid]);
        PlayerTextDrawShow(targetid, BanInfo[targetid]);
        PlayerTextDrawShow(targetid, BanReason[targetid]);
        PlayerTextDrawShow(targetid, BanBy[targetid]);
        PlayerTextDrawShow(targetid, Msg1[targetid]);
        PlayerTextDrawShow(targetid, Msg2[targetid]);
        Ban(targetid);
        return 1;
}
CMD:kick(playerid, params[])
{
        new targetid, reason[64], string[128];
        if(pInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "us[64]", targetid, reason)) return SCM(playerid, COLOR_RED, "[USAGE] /kick <playerid/part of name> <reason>");
        if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
        format(string, sizeof(string), "You Have Been kicked by %s for %s", GetName(playerid), reason);
        SCM(targetid, COLOR_RED, string);
        Kick(targetid);
        return 1;
}
CMD:gethere(playerid, params[])
{
        new targetid, Float:X, Float:Y, Float:Z;
        if(pInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "u", targetid)) return SCM(playerid, COLOR_RED, "[USAGE] /gethere <playerid/part of name>");
        if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
        GetPlayerPos(playerid, X, Y, Z);
        SetPlayerPos(targetid, X, Y+2, Z);
        return 1;
}
CMD:goto(playerid, params[])
{
        new targetid, Float:X, Float:Y, Float:Z;
        if(pInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "u", targetid)) return SCM(playerid, COLOR_RED, "[USAGE] /goto <playerid/part of name>");
        if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
        GetPlayerPos(targetid, X, Y, Z);
        SetPlayerPos(playerid, X, Y+2, Z);
        return 1;
}
CMD:mute(playerid, params[])
{
        new targetid, string[100];
        if(pInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "u", targetid)) return SCM(playerid, COLOR_RED, "[USAGE] /mute <playerid/part of name>");
        if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
        pInfo[targetid][pMute] = 1;
        format(string, sizeof(string), "[SERVER] You have been muted by %s", GetName(playerid));
        SCM(targetid, COLOR_RED, string);
        return 1;
}
CMD:unmute(playerid, params[])
{
        new targetid, string[100];
        if(pInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "u", targetid)) return SCM(playerid, COLOR_RED, "[USAGE] /unmute <playerid/part of name>");
        if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
        pInfo[targetid][pMute] = 0;
        format(string, sizeof(string), "[SERVER] You have been unmuted by %s", GetName(playerid));
        SCM(targetid, COLOR_RED, string);
        return 1;
}
CMD:getip(playerid, params[])
{
        new targetid, string[128], IP[16];
        if(pInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "u", targetid)) return SCM(playerid, COLOR_RED, "[USAGE] /getip <playerid/part of name>");
    if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
    GetPlayerIp(targetid, IP, sizeof(IP));
        format(string, sizeof(string), "The IP of %s is %s", GetName(targetid), IP);
        SCM(playerid, COLOR_GREEN, string);
        return 1;
}
CMD:slap(playerid, params[])
{
        new targetid, Float:Health, string[64];
        if(pInfo[playerid][pAdmin] == 0) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "u", targetid)) return SCM(playerid, COLOR_RED, "[USAGE] /slap <playerid/part of name>");
    if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
    GetPlayerHealth(targetid, Health);
    SetPlayerHealth(targetid, Health-20);
    format(string, sizeof(string), "Admin %s(%d) has slapped you", GetName(playerid), playerid);
    SCM(targetid, COLOR_DBLUE, string);
    return 1;
}
CMD:setlevel(playerid, params[])
{
        new targetid, level, string[100];
        if(pInfo[playerid][pAdmin] < 5 && !IsPlayerAdmin(playerid)) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "ud", targetid, level)) return SCM(playerid, COLOR_RED, "[USAGE] /setlevel <playerid/part of name> <level>");
    if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
    pInfo[targetid][pAdmin] = level;
    format(string, sizeof(string), "Admin %s has set your admin level to %d", GetName(playerid), level);
    SCM(targetid, COLOR_GREEN, string);
    format(string, sizeof(string), "You have successfully set %s's level to %d", GetName(targetid), level);
    SCM(playerid, COLOR_GREEN, string);
    return 1;
}
CMD:setmoney(playerid, params[])
{
        new targetid, money, string[100];
        if(pInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "ud", targetid, money)) return SCM(playerid, COLOR_RED, "[USAGE] /setmoney <playerid/part of name> <amount>");
    if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
        ResetPlayerMoney(targetid);
        GivePlayerMoney(targetid, money);
        format(string, sizeof(string), "Admin %s has set your money to %d", GetName(playerid), money);
        SCM(targetid, COLOR_GREEN, string);
        format(string, sizeof(string), "You have successfully set %s's money to %d", GetName(targetid), money);
    SCM(playerid, COLOR_GREEN, string);
    return 1;
}
CMD:setvip(playerid, params[])
{
        new targetid, level, string[100];
        if(pInfo[playerid][pAdmin] < 5 && !IsPlayerAdmin(playerid)) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "ud", targetid, level)) return SCM(playerid, COLOR_RED, "[USAGE] /setvip <playerid/part of name> <level>");
    if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
    pInfo[targetid][pVIP] = level;
    format(string, sizeof(string), "Admin %s has set your VIP level to %d", GetName(playerid), level);
    SCM(targetid, COLOR_GREEN, string);
    format(string, sizeof(string), "You have successfully set %s's level to %d", GetName(targetid), level);
    SCM(playerid, COLOR_GREEN, string);
    return 1;
}
CMD:setscore(playerid, params[])
{
        new targetid, score, string[100];
        if(pInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_RED, "[ERROR] You are not authorised to use this command");
        if(sscanf(params, "ud", targetid, score)) return SCM(playerid, COLOR_RED, "[USAGE] /setscore <playerid/part of name> <amount>");
    if(!IsPlayerConnected(targetid)) return SCM(playerid, COLOR_RED, "Player is not connected");
        SetPlayerScore(targetid, score);
        format(string, sizeof(string), "Admin %s has set your score to %d", GetName(playerid), score);
        SCM(targetid, COLOR_GREEN, string);
        format(string, sizeof(string), "You have successfully set %s's score to %d", GetName(targetid), score);
    SCM(playerid, COLOR_GREEN, string);
    return 1;
}
//============================[Stocks, Publics, Timers and Stuff]=========================
stock Path(playerid)
{
    new str[128],name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    format(str,sizeof(str),Userpath,name);
    return str;
}
public loadaccount_user(playerid, name[], value[])
{
    INI_String("Password", pInfo[playerid][pPass],129);
    INI_Int("AdminLevel",pInfo[playerid][pAdmin]);
    INI_Int("VIPLevel",pInfo[playerid][pVIP]);
    INI_Int("Money",pInfo[playerid][pMoney]);
    INI_Int("Score",pInfo[playerid][pScore]);
    INI_Int("Muted", pInfo[playerid][pMute]);
    INI_Int("Frozen", pInfo[playerid][pFrozen]);
    INI_Int("Warnings", pInfo[playerid][pWarns]);
        INI_Int("Duty", pInfo[playerid][pDuty]);
        INI_Int("NoPM", pInfo[playerid][pNoPM]);
        INI_Int("Answers", pInfo[playerid][pAnswers]);
    return 1;
}
public PingKick()
{
        for(new i=0;i<MAX_PLAYERS;i++)
        {
            if(GetPlayerPing(i) > MAX_PING)
            {
                        new string[100];
                        format(string, sizeof(string), "[SERVER KICK]You have exceeded the ping limit. Maximum ping is %d", MAX_PING);
                        SCM(i, COLOR_RED, string);
                        Kick(i);
                }
        }
        return 1;
}
public ClearSpam()
{
        for(new i=0;i<MAX_PLAYERS;i++)
        {
            if(pInfo[i][pSpam] == 1)
            {
                pInfo[i][pSpam] = 0;
                }
        }
        return 1;
}
public ClearMute()
{
        for(new i=0;i<MAX_PLAYERS;i++)
        {
            if(pInfo[i][pMute] == 1)
            {
                pInfo[i][pMute] = 0;
                }
        }
        return 1;
}
stock SendMessageToAdmins(color,const string[])
{
        for(new i = 0; i < MAX_PLAYERS; i++)
        {
                if(IsPlayerConnected(i))
                {
                    if(pInfo[i][pAdmin] > 0)
                    {
                        SCM(i, color, string);
                        }
                }
        }
        return 1;
}
stock SendMessageToVIPS(color,const string[])
{
        for(new i = 0; i < MAX_PLAYERS; i++)
        {
                if(IsPlayerConnected(i))
                {
                    if(pInfo[i][pVIP] > 0)
                    {
                        SCM(i, color, string);
                        }
                }
        }
        return 1;
}
stock GetName(playerid)
{
        new pName[MAX_PLAYER_NAME];
        GetPlayerName(playerid, pName, sizeof(pName));
        return pName;
}
public update(playerid)
{
    new infostring[128];
        format(infostring, sizeof(infostring), "Name : %s   Admin Level : %d   VIP Level : %d   Score : %d   Cash : %d", GetName(playerid), pInfo[playerid][pAdmin], pInfo[playerid][pVIP], GetPlayerScore(playerid), GetPlayerMoney(playerid));
        PlayerTextDrawSetString(playerid, InfoName[playerid], infostring);
}
SetPlayerTeamFromClass(playerid, classid)
{
        switch (classid)
        {
                case 0,1,2,3: // Classes that will be truckdrivers
                {
                        // Display the name of the class
            gTeam[playerid] = TEAM_TRUCKER;
                }
                case 4,5,6,7,8,9: // Classes that will be Boat-drivers
                {
                        // Display the name of the class
            gTeam[playerid] = TEAM_BUSDRIVER;
                }
                case 10,11,12,13:
                {
                    gTeam[playerid] = TEAM_TAXIDRIVER;
                }
                case 14,15,16,17,18:
                {
                    gTeam[playerid] = TEAM_PILOT;
                }
                case 19,20,21:
                {
                    gTeam[playerid] = TEAM_BOATDRIVER;
                }
        }
}
SetPlayerToTeamColor(playerid)
{
        if (gTeam[playerid] == TEAM_TRUCKER)
        {
                SetPlayerColor(playerid, TEAM_TRUCKER_COLOR);
        }
        else if (gTeam[playerid] == TEAM_BUSDRIVER)
        {
                SetPlayerColor(playerid, TEAM_BUSDRIVER_COLOR);
        }
        else if (gTeam[playerid] == TEAM_TAXIDRIVER)
        {
                SetPlayerColor(playerid, TEAM_TAXIDRIVER_COLOR);
        }
        else if (gTeam[playerid] == TEAM_PILOT)
        {
                SetPlayerColor(playerid, TEAM_PILOT_COLOR);
        }
        else if (gTeam[playerid] == TEAM_BOATDRIVER)
        {
                SetPlayerColor(playerid, TEAM_BOATDRIVER_COLOR);
        }
}


public Loading(playerid)
{
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, unx[playerid], uny[playerid], unz[playerid], 7);
        SCM(playerid, COLOR_GREEN, "Loaded. Head to the next checkpoint");
        GameTextForPlayer(playerid, "~y~Loaded~n~~g~Head to the Next Checkpoint", 2000, 1);
        TogglePlayerControllable(playerid, 1);
        MissionStatus[playerid] = 2;
        return 1;
}
public UnLoading(playerid)
{
        new string[64];
        TextDrawHideForPlayer(playerid, WorkText);
        DisablePlayerCheckpoint(playerid);
        GivePlayerMoney(playerid, iPay[playerid]);
        format(string, 64, "Well Done! You get +2 Score and $%d", iPay[playerid]);
        SCM(playerid, COLOR_GREEN, string);
        TogglePlayerControllable(playerid, 1);
        SetPlayerScore(playerid, GetPlayerScore(playerid)+2);
        MissionStatus[playerid] = 0;
        SCM(playerid, PM_OUTGOING_COLOR, "Use /work to start a job");
        return 1;
}
public CarRespawn()
{
    for(new i = 1; i <= MAX_VEHICLES; i++)
        {
                SetVehicleToRespawn(i);
        }
        return 1;
}
stock GetRandomModelByGroup( iGroup )
{
        // Data from cargrp.dat

        switch ( iGroup )
        {
                case ZONE_TYPE_BUSINESS: // POPCYCLE_GROUP_BUSINESS
                {
default_group:
                        static
                                s_aiVehicles[ ] =
                                {
                                        VEHICLE_BRAVURA,
                                        VEHICLE_TAXI,
                                        VEHICLE_CABBIE,
                                        VEHICLE_PREMIER,
                                        VEHICLE_SECURICA,
                                        VEHICLE_ELEGANT,
                                        VEHICLE_FORTUNE,
                                        VEHICLE_FELTZER,
                                        VEHICLE_MERIT,
                                        VEHICLE_ELEGANT,
                                        VEHICLE_HUNTLEY,
                                        VEHICLE_ZR350,
                                        VEHICLE_SENTINEL
                                }
                        ;

                        return s_aiVehicles[ random( sizeof( s_aiVehicles ) ) ];
                }

                case ZONE_TYPE_DESERT: // POPCYCLE_GROUP_DESERT_FOLK
                {
                        static
                                s_aiVehicles[ ] =
                                {
                                        VEHICLE_SANCHEZ,
                                        VEHICLE_WALTON,
                                        VEHICLE_RANCHER,
                                        VEHICLE_WAYFARER,
                                        VEHICLE_FREEWAY,
                                        VEHICLE_PETRO,
                                        VEHICLE_RDTRAIN
                                }
                        ;

                        return s_aiVehicles[ random( sizeof( s_aiVehicles ) ) ];
                }

                case ZONE_TYPE_ENTERTAINMENT: // POPCYCLE_GROUP_ENTERTAINERS
                {
                        static
                                s_aiVehicles[ ] =
                                {
                                        VEHICLE_TURISMO,
                                        VEHICLE_HUSTLER,
                                        VEHICLE_BULLET,
                                        VEHICLE_BUFFALO,
                                        VEHICLE_STRETCH,
                                        VEHICLE_TAXI,
                                        VEHICLE_CABBIE,
//                                      VEHICLE_COACH, // Too long for most places
                                        VEHICLE_FLASH,
                                        VEHICLE_SULTAN,
                                        VEHICLE_CLUB
                                }
                        ;

                        return s_aiVehicles[ random( sizeof( s_aiVehicles ) ) ];
                }

                case ZONE_TYPE_COUNTRYSIDE: // POPCYCLE_GROUP_FARMERS
                {
                        static
                                s_aiVehicles[ ] =
                                {
                                        VEHICLE_SANCHEZ,
                                        VEHICLE_WALTON,
                                        VEHICLE_RANCHER,
                                        VEHICLE_JOURNEY,
                                        VEHICLE_TRACTOR,
                                        VEHICLE_WAYFARER,
                                        VEHICLE_FREEWAY,
                                        VEHICLE_LINERUN,
                                        VEHICLE_PETRO
                                }
                        ;

                        return s_aiVehicles[ random( sizeof( s_aiVehicles ) ) ];
                }

                case ZONE_TYPE_RESIDENTIAL_RICH: // POPCYCLE_GROUP_CASUAL_RICH
                {
                        static
                                s_aiVehicles[ ] =
                                {
                                        VEHICLE_STRETCH,
                                        VEHICLE_BUFFALO,
                                        VEHICLE_ELEGANT,
                                        VEHICLE_PREMIER,
                                        VEHICLE_STRATUM,
                                        VEHICLE_INFERNUS,
                                        VEHICLE_CHEETAH,
                                        VEHICLE_BANSHEE,
                                        VEHICLE_FREEWAY,
                                        VEHICLE_ZR350,
                                        VEHICLE_COMET,
                                        VEHICLE_SUPERGT,
                                        VEHICLE_FCR900,
                                        VEHICLE_WINDSOR,
                                        VEHICLE_JESTER,
                                        VEHICLE_ELEGY,
                                        VEHICLE_BROADWAY,
                                        VEHICLE_STAFFORD,
                                        VEHICLE_HUNTLEY,
                                        VEHICLE_TAXI,
                                        VEHICLE_CABBIE,
                                        VEHICLE_ALPHA,
                                        VEHICLE_SLAMVAN,
                                        VEHICLE_EUROS,
                                        VEHICLE_PHOENIX,
                                        VEHICLE_EMPEROR
                                }
                        ;

                        return s_aiVehicles[ random( sizeof( s_aiVehicles ) ) ];
                }

                case ZONE_TYPE_RESIDENTIAL_AVERAGE: // POPCYCLE_GROUP_CASUAL_AVERAGE
                {
                        static
                                s_aiVehicles[ ] =
                                {
                                        VEHICLE_TAXI,
                                        VEHICLE_CABBIE,
                                        VEHICLE_PREMIER,
                                        VEHICLE_ELEGANT,
                                        VEHICLE_FORTUNE,
                                        VEHICLE_BOBCAT,
                                        VEHICLE_PRIMO,
                                        VEHICLE_LANDSTAL,
                                        VEHICLE_BRAVURA,
                                        VEHICLE_WASHING,
                                        VEHICLE_PREVION,
                                        VEHICLE_ADMIRAL,
                                        VEHICLE_SOLAIR,
                                        VEHICLE_PCJ600,
                                        VEHICLE_BLISTAC,
                                        VEHICLE_NEBULA,
                                        VEHICLE_CADRONA,
                                        VEHICLE_VINCENT,
                                        VEHICLE_SUNRISE,
                                        VEHICLE_YOSEMITE,
                                        VEHICLE_STRATUM,
                                        VEHICLE_BF400,
                                        VEHICLE_EMPEROR,
                                        VEHICLE_TAHOMA,
                                        VEHICLE_PICADOR,
                                        VEHICLE_BMX,
                                        VEHICLE_TORNADO,
                                        VEHICLE_EUROS,
                                        VEHICLE_SENTINEL
                                }
                        ;

                        return s_aiVehicles[ random( sizeof( s_aiVehicles ) ) ];
                }

                case ZONE_TYPE_RESIDENTIAL_POOR: // POPCYCLE_GROUP_CASUAL_POOR
                {
                        static
                                s_aiVehicles[ ] =
                                {
                                        VEHICLE_ESPERANT,
                                        VEHICLE_BOBCAT,
                                        VEHICLE_SABRE,
                                        VEHICLE_REGINA,
                                        VEHICLE_VIRGO,
                                        VEHICLE_GREENWOO,
                                        VEHICLE_WILLARD,
                                        VEHICLE_CLOVER,
                                        VEHICLE_SADLER,
                                        VEHICLE_INTRUDER,
                                        VEHICLE_PRIMO,
                                        VEHICLE_BIKE,
                                        VEHICLE_BRAVURA,
                                        VEHICLE_REMINGTN,
                                        VEHICLE_HERMES,
                                        VEHICLE_CAMPER,
                                        VEHICLE_STALLION,
                                        VEHICLE_TAHOMA,
                                        VEHICLE_PICADOR,
                                        VEHICLE_BMX,
                                        VEHICLE_MOONBEAM,
                                        VEHICLE_NEWSVAN
                                }
                        ;

                        return s_aiVehicles[ random( sizeof( s_aiVehicles ) ) ];
                }

                case ZONE_TYPE_GANGLAND: // POPCYCLE_GROUP_CRIMINALS
                {
                        static
                                s_aiVehicles[ ] =
                                {
                                        VEHICLE_PEREN,
                                        VEHICLE_BLADE,
                                        VEHICLE_CLOVER
                                }
                        ;

                        return s_aiVehicles[ random( sizeof( s_aiVehicles ) ) ];
                }

                case ZONE_TYPE_BEACH: // POPCYCLE_GROUP_BEACHFOLK
                {
                        static
                                s_aiVehicles[ ] =
                                {
                                        VEHICLE_TAXI,
                                        VEHICLE_CABBIE,
                                        VEHICLE_BFINJECT,
                                        VEHICLE_FAGGIO,
                                        VEHICLE_GLENDALE,
                                        VEHICLE_OCEANIC,
                                        VEHICLE_MESA,
                                        VEHICLE_BMX,
                                        VEHICLE_MTBIKE,
                                        VEHICLE_MRWHOOP,
                                        VEHICLE_WASHING,
                                        VEHICLE_PREVION,
                                        VEHICLE_PCJ600,
                                        VEHICLE_CADRONA,
                                        VEHICLE_SUNRISE,
                                        VEHICLE_YOSEMITE,
                                        VEHICLE_BRAVURA,
                                        VEHICLE_PRIMO
                                }
                        ;

                        return s_aiVehicles[ random( sizeof( s_aiVehicles ) ) ];
                }

                case ZONE_TYPE_SHOPPING: // POPCYCLE_GROUP_CLUBBERS
                {
                        static
                                s_aiVehicles0[ ] =
                                {
                                        VEHICLE_BUFFALO,
                                        VEHICLE_STRETCH,
                                        VEHICLE_TAXI,
                                        VEHICLE_CABBIE,
//                                      VEHICLE_COACH, // Too long for most places
                                        VEHICLE_FLASH,
                                        VEHICLE_SULTAN,
                                        VEHICLE_CLUB
                                }
                        ;

                        return s_aiVehicles0[ random( sizeof( s_aiVehicles0 ) ) ];
                }

                case ZONE_TYPE_PARK: // POPCYCLE_GROUP_PARKFOLK
                {
                        static
                                s_aiVehicles1[ ] =
                                {
                                        VEHICLE_TAXI,
                                        VEHICLE_CABBIE,
                                        VEHICLE_BFINJECT,
                                        VEHICLE_FAGGIO,
                                        VEHICLE_GLENDALE,
                                        VEHICLE_MESA,
                                        VEHICLE_BMX,
                                        VEHICLE_MTBIKE,
                                        VEHICLE_WASHING,
                                        VEHICLE_PREVION,
                                        VEHICLE_PCJ600,
                                        VEHICLE_CADRONA,
                                        VEHICLE_YOSEMITE,
                                        VEHICLE_BRAVURA,
                                        VEHICLE_PRIMO
                                }
                        ;

                        return s_aiVehicles1[ random( sizeof( s_aiVehicles1 ) ) ];
                }

                case ZONE_TYPE_INDUSTRY: // POPCYCLE_GROUP_WORKERS
                {
                        static
                                s_aiVehicles2[ ] =
                                {
                                        VEHICLE_LINERUN,
                                        VEHICLE_PACKER,
                                        VEHICLE_TAXI,
                                        VEHICLE_CABBIE,
                                        VEHICLE_MULE,
//                                      VEHICLE_BUS, // Too long for most places
//                                      VEHICLE_COACH, // ^
                                        VEHICLE_RUMPO,
                                        VEHICLE_PONY,
                                        VEHICLE_FLATBED,
                                        VEHICLE_YANKEE,
                                        VEHICLE_TOPFUN,
                                        VEHICLE_CEMENT,
                                        VEHICLE_TOWTRUCK,
                                        VEHICLE_BURRITO,
                                        VEHICLE_BOXVILLE,
                                        VEHICLE_BENSON,
                                        VEHICLE_UTILITY,
                                        VEHICLE_PIZZABOY,
                                        VEHICLE_TRASH,
                                        VEHICLE_DFT30
                                }
                        ;

                        return s_aiVehicles2[ random( sizeof( s_aiVehicles2 ) ) ];
                }

                case ZONE_TYPE_ENTERTAINMENT_BUSY: // POPCYCLE_GROUP_SERVANTS
                {
                        static
                                s_aiVehicles3[ ] =
                                {
                                        VEHICLE_BUFFALO,
                                        VEHICLE_STRETCH,
                                        VEHICLE_TAXI,
                                        VEHICLE_CABBIE,
//                                      VEHICLE_COACH, // Too long for most places
                                        VEHICLE_FLASH,
                                        VEHICLE_SULTAN,
                                        VEHICLE_CLUB
                                }
                        ;

                        return s_aiVehicles3[ random( sizeof( s_aiVehicles3 ) ) ];
                }

                case ZONE_TYPE_SHOPPING_BUSY,
                     ZONE_TYPE_SHOPPING_POSH: // POPCYCLE_GROUP_CASUAL_AVERAGE
                {
                        static
                                s_aiVehicles4[ ] =
                                {
                                        VEHICLE_TAXI,
                                        VEHICLE_CABBIE,
                                        VEHICLE_PREMIER,
                                        VEHICLE_ELEGANT,
                                        VEHICLE_FORTUNE,
                                        VEHICLE_BOBCAT,
                                        VEHICLE_PRIMO,
                                        VEHICLE_LANDSTAL,
                                        VEHICLE_BRAVURA,
                                        VEHICLE_WASHING,
                                        VEHICLE_PREVION,
                                        VEHICLE_ADMIRAL,
                                        VEHICLE_SOLAIR,
                                        VEHICLE_PCJ600,
                                        VEHICLE_BLISTAC,
                                        VEHICLE_NEBULA,
                                        VEHICLE_CADRONA,
                                        VEHICLE_VINCENT,
                                        VEHICLE_SUNRISE,
                                        VEHICLE_YOSEMITE,
                                        VEHICLE_STRATUM,
                                        VEHICLE_BF400,
                                        VEHICLE_EMPEROR,
                                        VEHICLE_TAHOMA,
                                        VEHICLE_PICADOR,
                                        VEHICLE_BMX,
                                        VEHICLE_TORNADO,
                                        VEHICLE_EUROS,
                                        VEHICLE_SENTINEL
                                }
                        ;

                        return s_aiVehicles4[ random( sizeof( s_aiVehicles4 ) ) ];
                }

                case ZONE_TYPE_RESI_RICH_SECLUDED: // POPCYCLE_GROUP_CASUAL_RICH
                {
                        static
                                s_aiVehicles5[ ] =
                                {
                                        VEHICLE_STRETCH,
                                        VEHICLE_BUFFALO,
                                        VEHICLE_ELEGANT,
                                        VEHICLE_PREMIER,
                                        VEHICLE_STRATUM,
                                        VEHICLE_INFERNUS,
                                        VEHICLE_CHEETAH,
                                        VEHICLE_BANSHEE,
                                        VEHICLE_FREEWAY,
                                        VEHICLE_ZR350,
                                        VEHICLE_COMET,
                                        VEHICLE_SUPERGT,
                                        VEHICLE_FCR900,
                                        VEHICLE_WINDSOR,
                                        VEHICLE_JESTER,
                                        VEHICLE_ELEGY,
                                        VEHICLE_BROADWAY,
                                        VEHICLE_STAFFORD,
                                        VEHICLE_HUNTLEY,
                                        VEHICLE_TAXI,
                                        VEHICLE_CABBIE,
                                        VEHICLE_ALPHA,
                                        VEHICLE_SLAMVAN,
                                        VEHICLE_EUROS,
                                        VEHICLE_PHOENIX,
                                        VEHICLE_EMPEROR
                                }
                        ;

                        return s_aiVehicles5[ random( sizeof( s_aiVehicles5 ) ) ];
                }

                case ZONE_TYPE_AIRPORT: // POPCYCLE_GROUP_AIRCREW
                {
                        static
                                s_aiVehicles6[ ] =
                                {
                                        VEHICLE_BRAVURA,
                                        VEHICLE_WASHING,
                                        VEHICLE_PREVION,
                                        VEHICLE_ADMIRAL,
                                        VEHICLE_SOLAIR,
                                        VEHICLE_PCJ600,
                                        VEHICLE_BLISTAC,
                                        VEHICLE_NEBULA,
                                        VEHICLE_CADRONA,
                                        VEHICLE_VINCENT,
                                        VEHICLE_SUNRISE,
                                        VEHICLE_YOSEMITE,
                                        VEHICLE_URANUS,
                                        VEHICLE_STRATUM,
                                        VEHICLE_BF400,
                                        VEHICLE_EMPEROR,
                                        VEHICLE_WAYFARER
                                }
                        ;

                        return s_aiVehicles6[ random( sizeof( s_aiVehicles6 ) ) ];
                }

                case ZONE_TYPE_GOLF_CLUB: // POPCYCLE_GROUP_GOLFERS
                {
                        static
                                s_aiVehicles7[ ] =
                                {
                                        VEHICLE_CADDY
                                }
                        ;

                        return s_aiVehicles7[ random( sizeof( s_aiVehicles7 ) ) ];
                }

                case ZONE_TYPE_OUT_OF_TOWN_FACTORY: // POPCYCLE_GROUP_OUT_OF_TOWN_FACTORY
                {
                        static
                                s_aiVehicles8[ ] =
                                {
                                        VEHICLE_MULE,
                                        VEHICLE_RUMPO,
                                        VEHICLE_PONY,
                                        VEHICLE_FLATBED,
                                        VEHICLE_YANKEE,
                                        VEHICLE_TOPFUN,
                                        VEHICLE_CEMENT,
                                        VEHICLE_BURRITO,
                                        VEHICLE_BOXVILLE,
                                        VEHICLE_BENSON,
                                        VEHICLE_UTILITY,
                                        VEHICLE_DFT30,
                                        VEHICLE_FORKLIFT
                                }
                        ;

                        return s_aiVehicles8[ random( sizeof( s_aiVehicles8 ) ) ];
                }

                case ZONE_TYPE_AIRPORT_RUNWAY: // POPCYCLE_GROUP_GOLFERS
                {
                        static
                                s_aiVehicles9[ ] =
                                {
                                        VEHICLE_CADDY
                                }
                        ;

                        return s_aiVehicles9[ random( sizeof( s_aiVehicles9 ) ) ];
                }
        }

        goto default_group;
}
